{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Como documento mis proyectos \u00b6 Voy a tratar de poner en este tutorial todo lo necesario para crear de forma sencilla la documentaci\u00f3n de un proyecto cualquiera y tenerlo disponible como una p\u00e1gina de GitHub. Para ello voy a seguir la plantilla de La Jaqueria creada por Cristobal Contreras donde explica claramente todo lo que necesitamos para documentar de esta forma que vamos a explicar. La plantilla realizada con MkDocs utiliza la libreria Material y el editor de texto que usaremos ser\u00e1 el VSCode. Antes de nada debemos asegurarnos de tener cubiertos los requisitos previos siguientes: 1.- Tener Python 3 instalado. Antes de nada actualizamos nuestro sistema. $ sudo apt update . Actualizamos lista de paquetes y sus versiones $ sudo apt -y upgrade . Instala las nuevas versiones de los paquetes actualizados. Comprobamos si tenemos instalado Python tecleando en una terminal lo siguiente: Versi\u00f3n 2.7: $ python -V . Devolver\u00e1 algo similar a: $ Python 2.7.17 Versi\u00f3n 3: $ python3 -V . Devolver\u00e1 algo similar a: $ Python 3.6.9 2.- Instalar PIP, el gestor de paquetes de Python. $ sudo apt install -y python3-pip Comprobar la versi\u00f3n PIP instalada: $ pip --version o $ pip3 --version Esto devolver\u00e1 algo similar a: pip 20.0.2 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6) 3.- Instalar Pipenv para tener un flujo de trabajo en Python: $ pip install pipenv . Toda la documentaci\u00f3n va a estar realizada con Ubuntu 18.04 de nombre clave Bionic Beaver y todas las herramientas que se detallan en el apartado software utilizado","title":"Introducci\u00f3n"},{"location":"#como-documento-mis-proyectos","text":"Voy a tratar de poner en este tutorial todo lo necesario para crear de forma sencilla la documentaci\u00f3n de un proyecto cualquiera y tenerlo disponible como una p\u00e1gina de GitHub. Para ello voy a seguir la plantilla de La Jaqueria creada por Cristobal Contreras donde explica claramente todo lo que necesitamos para documentar de esta forma que vamos a explicar. La plantilla realizada con MkDocs utiliza la libreria Material y el editor de texto que usaremos ser\u00e1 el VSCode. Antes de nada debemos asegurarnos de tener cubiertos los requisitos previos siguientes: 1.- Tener Python 3 instalado. Antes de nada actualizamos nuestro sistema. $ sudo apt update . Actualizamos lista de paquetes y sus versiones $ sudo apt -y upgrade . Instala las nuevas versiones de los paquetes actualizados. Comprobamos si tenemos instalado Python tecleando en una terminal lo siguiente: Versi\u00f3n 2.7: $ python -V . Devolver\u00e1 algo similar a: $ Python 2.7.17 Versi\u00f3n 3: $ python3 -V . Devolver\u00e1 algo similar a: $ Python 3.6.9 2.- Instalar PIP, el gestor de paquetes de Python. $ sudo apt install -y python3-pip Comprobar la versi\u00f3n PIP instalada: $ pip --version o $ pip3 --version Esto devolver\u00e1 algo similar a: pip 20.0.2 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6) 3.- Instalar Pipenv para tener un flujo de trabajo en Python: $ pip install pipenv . Toda la documentaci\u00f3n va a estar realizada con Ubuntu 18.04 de nombre clave Bionic Beaver y todas las herramientas que se detallan en el apartado software utilizado","title":"Como documento mis proyectos"},{"location":"Editor-VSCode/","text":"Editor VSCode \u00b6 Introducci\u00f3n y configuraci\u00f3n inicial \u00b6 Seg\u00fan la Wikipedia, Visual Studio Code es un editor de c\u00f3digo fuente desarrollado por Microsoft para Windows, Linux y macOS. Incluye soporte para la depuraci\u00f3n, control integrado de Git, resaltado de sintaxis, finalizaci\u00f3n inteligente de c\u00f3digo, fragmentos y refactorizaci\u00f3n de c\u00f3digo. Es un proyecto de software libre que se distribuye bajo la licencia MIT, aunque los ejecutables se distribuyen bajo una licencia gratuita no libre. Para descargar VSCode visitamos y escogemos seg\u00fan nuestro sistema, en mi caso los paquetes Debian v\u00e1lidos para Ubuntu. Imagen 1 Descarga de VSCode Cuando iniciamos VSCode el aspecto que nos presenta es el que vemos en la imagen 2. Imagen 2 Pantalla inicial de VSCode Lo primero que vamos a hacer en configurar el idioma y para ellos hacemos clic en el icono de Extensiones de la barra lateral izquierda y procedemos seg\u00fan lo indicado en la imagen 3. Imagen 3 Configurar idioma en VSCode Una vez reiniciado VSCode ya tenemos el editor en espa\u00f1ol, como vemos en la imagen 4. Imagen 1 Entorno de VSCode configurado en idioma espa\u00f1ol Instalaci\u00f3n de extensiones en VSCode \u00b6 Vamos a instalar el paquete Python en VSCode, para ello abrimos el programa y hacemos clic en el icono de extensiones y en el buscador tecleamos python y hacemos clic en el bot\u00f3n Install se\u00f1alado en la imagen 5. Imagen 5 Instalaci\u00f3n paquete Python Se inicia el proceso de instalaci\u00f3n que se ver\u00e1 de la forma que muestra la imagen 6. Imagen 6 Instalaci\u00f3n paquete Python en proceso Una vez finalizada la instalaci\u00f3n nos indicar\u00e1 que se requiere una recarga de Python, lo que hacemos clicando el bot\u00f3n se\u00f1alado en la imagen 7. Imagen 7 Recarga de Python Si necesitamos otras extensiones las podemos instalar de forma similar a las anteriores. Si ahora cerramos la pesta\u00f1a de bienvenida tendremos la expresi\u00f3n m\u00ednima se VSCode (imagen 8) y veremos de fondo los comando de inicio mas habituales. Imagen 8 Expresi\u00f3n m\u00ednima de VSCode El Explorador de VSCode \u00b6 VSCode incorpora la utilidad de Abrir carpeta que resulta especialmente \u00fatil cuando tenemos que trabajar con un conjunto de archivos que se encuentran en una carpeta o directorio. Esta opci\u00f3n nos va a mostrar la lista de archivos contenidos en ese directorio para no tener que abrir de forma individualizada cada archivo. En la bienvenida ya est\u00e1 disponible la opci\u00f3n y siempre lo vamos a poder hacer o bien desde la barra de actividades o bien desde el men\u00fa Archivo. En la imagen 9 se muestra el proceso para abrir una carpeta desde el Explorador. Imagen 9 Abrir carpeta desde el Explorador Vemos que tambi\u00e9n se incorpora la opci\u00f3n de Clonar un repositorio directamente desde VSCode si conocemos la URL del mismo. Una vez localizada y abierta la carpeta con la que vamos a trabajar el Explorador se presenta como vemos en la imagen 10. Imagen 10 Carpeta de trabajo abierta En la imagen 10 observamos en modo \u00e1rbol los archivos y subdirectorios que contiene la carpeta abierta y que podemos abrir para su edici\u00f3n. Tambi\u00e9n se pueden ver una serie de cambios que iremos analizando poco a poco. Si necesitamos cerrar la carpeta tenemos la opci\u00f3n disponible en el men\u00fa Archivo, tal y como se muestra en la imagen 11. Imagen 11 Cerrar carpeta Configuraci\u00f3n de VSCode \u00b6 Podemos acceder a las opciones de configuraci\u00f3n haciendo clic en el icono rueda dentada de la barra de actividades o bien desde el men\u00fa Archivo, como se observa en la imagen 12. Imagen 12 Opciones de configuraci\u00f3n de VSCode La configuraci\u00f3n por defecto del editor est\u00e1 suficientemente estudiada como para no necesitar ajustes aunque siempre es posible modificar cualquiera de las opciones disponibles a nuestro gusto. No nos vamos a detener en este tema pero si vamos a ver un poco m\u00e1s de la opci\u00f3n Configuraci\u00f3n propiamente dicha, que es la primera que aparece y que tambi\u00e9n es accesible con la combinaci\u00f3n de teclas [Ctrl+,]. Si accedemos a ella se nos abrir\u00e1n en la zona de trabajo las opciones de configuraci\u00f3n como vemos en la imagen 13. Imagen 13 Opciones de configuraci\u00f3n de VSCode Aqu\u00ed tenemos disponibles infinidad de opciones tanto de Usuario como del \u00c1rea de trabajo que podemos configurar seg\u00fan nuestras propias necesidades. A titulo de ejemplo vamos a ver como cambiar el tema color y tambi\u00e9n opciones referente a los iconos que aparecen asociados al explorador. Al tema de configuraci\u00f3n de color podemos acceder de cualquiera de las formas que se observan en la imagen 14. Imagen 14 Configuraci\u00f3n del tema color Observamos que el tema por defecto es el _Dark+_en el que vamos a permanecer. En la imagen 15 vemos el aspecto en dos configuraciones diferentes de color. Imagen 15 Tema color light+ Tema color alto contraste Tambi\u00e9n podemos modificar el tema iconos asociado a los archivos que se muestran en el explorador al que accedemos por cualquiera de los medios mostrados en la imagen 16. Imagen 16 Configuraci\u00f3n del tema iconos VSCode por defecto tan solo dispone de tres posibilidades que son las mostradas en la imagen 17. Imagen 17 Opciones por defecto de tema iconos Si accedemos seg\u00fan la imagen 18 podemos directamente entrar en la opci\u00f3n de instalar nuevos iconos. Imagen 18 Acceso r\u00e1pido a la opci\u00f3n de instalar iconos Una vez seleccionada la opci\u00f3n se nos mostrar\u00e1 algo similar a la imagen 19. En esta imagen observamos como hay disponibles iconos tanto para VSCode como para Material, que es la librer\u00eda que estamos utilizando. Vamos a instalar uno de cada para poder analizarlos. Imagen 19 Opciones para instalar temas de iconos Explorador de VSCode \u00b6 Ya hemos visto anteriormente como abrir una carpeta desde el explorador y ahora vamos a ver algunas opciones de las que disponemos en el mismo. Para abrir un archivo lo seleccionamos con un clic en el explorador y a continuaci\u00f3n hacemos doble clic sobre el mismo. Cuando tenemos abierta una carpeta tenemos la posibilidad desde el mismo explorador de crear archivos, carpetas, actualizar y contraer carpetas, como se muestra en la imagen 20. Los iconos de estas tareas solamente son visibles cuando situamos el cursor del rat\u00f3n en la ventana del Explorador. Imagen 20 Opciones relativas al explorador En la parte superior del explorador tenemos la lista de archivos abiertos para edici\u00f3n as\u00ed como los iconos de las tareas posibles a realizar, tal y como se observa en la imagen 21. Imagen 21 Editores abiertos A veces resulta interesante tener abierto dos veces el mismo archivo para poder comparar dos partes del mismo que no podemos ver en una sola ventana. En la parte superior derecha tenemos el icono que lo hace posible tal y como observamos en la imagen 22, donde observamos que tenemos abierto el mismo archivo dos veces. Imagen 22 Opci\u00f3n de dividir editor Hay otra forma especialmente \u00fatil de a\u00f1adir archivos a la ventana de edici\u00f3n y establecer su disposici\u00f3n si existe ya alg\u00fan archivo abierto. Esto es haciendo clic sobre el mismo y arrastr\u00e1ndolo hasta dicha ventana. Existen tres formas de hacerlo y la explicaci\u00f3n la vamos a ver en la animaci\u00f3n correspondiente a cada una de ellas que sigue a continuaci\u00f3n. 1.- Abrir a pantalla completa 2.- Abrir en divisi\u00f3n o disposici\u00f3n vertical 3.- Abrir en divisi\u00f3n o disposici\u00f3n horizontal Buscar en VSCode \u00b6 El icono de la lupa es la forma m\u00e1s r\u00e1pida de acceder a las tareas de b\u00fasqueda. Un vez activado desde la barra de actividades tiene el aspecto de la imagen 23. Imagen 23 Buscar Asociados a la b\u00fasqueda hay tres iconos que de izquierda a derecha sirve para hacer coincidir may\u00fasculas y min\u00fasculas, solo palabras completas, usar expresiones regulares. Si necesitamos reemplazar las b\u00fasquedas por algo concreto basta con teclearlo en la ventana correspondiente que tiene como iconos asociados el de conservar may\u00fasculas y min\u00fasculas y el de reemplazar todo. El icono di\u00e9resis justo debajo de la ventana reemplazar nos permite filtrar en que archivos y carpetas buscar o excluirlos esos archivos para la b\u00fasqueda. En la imagen 24 vemos las opciones activadas. Imagen 24 Incluir / Excluir en la b\u00fasqueda Debemos tener presente que VSCode ya tiene en su configuraci\u00f3n la exclusi\u00f3n de algunas carpetas para la b\u00fasqueda. De cuales se trata lo podemos ver accediendo a la configuraci\u00f3n, tal y como observamos en la imagen 25. Imagen 25 Archivos desactivados para la b\u00fasqueda IntelliSense \u00b6 Es la funci\u00f3n de autocompletado usada en el entorno de desarrollo integrado Microsoft Visual Studio y tambi\u00e9n en el editor de c\u00f3digo Visual Studio Code. Visual Studio Code trae esta funcionalidad por defecto para JavaScript, TypeScript, CSS, HTML JSON, Less y Sass. Tambi\u00e9n existen extensiones para otros muchos lenguajes y vamos a ver como instalar alguna de ellas. En la imagen 26 vemos ls b\u00fasqueda y selecci\u00f3n de la que vamos a instalar en nuestro caso. Imagen 26 Instalaci\u00f3n de autocompletado para C++ Una vez instalada la extensi\u00f3n basta con crear un archivo nuevo y salvarlo como cpp y se mostrar\u00e1 algo similar a la imagen 27. Imagen 27 Habilitaci\u00f3n de la extensi\u00f3n autocompletar c++ Al pulsar en Mostrar recomendaciones se nos muestra la sugerencia de instalar la que vemos en la imagen 28. Imagen 28 Instalaci\u00f3n extension recomendada Una vez instalada la recomendaci\u00f3n nos situamos en el archivo creado al efecto y nada m\u00e1s comenzar a teclear suceder\u00e1 algo similar a lo que vemos en la imagen 29. El editor ya reconoce el lenguaje y nos muestra las sugerencias adecuadas. Imagen 29 Autocompletado en funcionamiento Pues bien, si escogemos la primera opci\u00f3n se nos crea la estructura b\u00e1sica de la funci\u00f3n principal de un programa C++ tal y como vemos en la imagen 30. Imagen 30 Resultado del autocompletado En la imagen 29 observamos que a la izquierda de cada sugerencia hay un icono y este tiene un determinado significado con el cual nos iremos familiarizando poco a poco con el uso. A titulo de ejemplo a continuaci\u00f3n vemos algunos de estos iconos y su significado. Iconos Significado Code snippet o fragmento de c\u00f3digo Palabras clave del lenguaje Valores, referencias y enumeraciones Atributos Terminal de comandos integrado en VSCode \u00b6 VSCode incorpora la posibilidad de mostrar una o varias terminales de comandos del sistema operativo donde se ejecuta en la ventana de trabajo y hay dos formas b\u00e1sicas de hacerlo, bien desde el men\u00fa Ver/Terminal o bien desde el men\u00fa Terminal/Nueva terminal . En cualquier caso el resultado lo vemos en la imagen 31. Imagen 31 Terminal de comandos El funcionamiento de este bash, terminal o consola es id\u00e9ntico al del sistema pero adem\u00e1s lleva asociada una barra con distintas tareas e iconos algunos de los cuales vamos a describir a continuaci\u00f3n. En la imagen 32 tenemos una captura de la tarea PROBLEMAS. Aqu\u00ed se nos muestran tanto el n\u00famero como una descripci\u00f3n de los problemas encontrados en los archivos que actualmente tengamos abiertos. Lo ideal es que ning\u00fan archivo tenga ning\u00fan tipo de advertencia. Pero no siempre ser\u00e1 posible, como nos va a ocurrir con las etiquetas HTML <center> </center> que ser\u00e1n marcadas como advertencia pero que al no pertenecer a MarkDown no se puede resolver. Imagen 32 Indicaci\u00f3n de los problemas encontrados en el c\u00f3digo En este caso nos indica dos problemas que vamos a analizar y resolver. En concreto las dos advertencias se refieren al fichero about.md como se observa en la imagen 33, donde adem\u00e1s se observa c\u00f3mo ambos problemas est\u00e1n se\u00f1alados. Cuando hacemos un clic sobre el problema este quedar\u00e1 se\u00f1alado en el archivo y aparecer\u00e1 una bombillita azul que nos dar\u00e1 opciones relativas al mismo. Imagen 33 Fichero en el que est\u00e1n los problemas El primer problema se refiere a que tras una linea de t\u00edtulo o cabecera debe ir una l\u00ednea en blanco y tenemos b\u00e1sicamente tres formas de solucionarlo: Insertar las l\u00ednea a mano. Hacer clic en la advertencia (la bombillita azul) para que se muestren las opciones disponibles y escoger una de ellas. En la imagen 34 vemos las opciones. Tambi\u00e9n podemos acceder a estas opciones si hacemos clic derecho en la consola sobre el problema en cuyo caso veremos algo como la imagen 35 con un par de opciones m\u00e1s disponibles. Imagen 34 Opciones disponibles en la correcci\u00f3n del problema Imagen 35 Otra opci\u00f3n de mostrar las opciones disponibles de correcci\u00f3n Ahora se\u00f1alamos el segundo problema tal y como se muestra en la imagen 36. En este caso se refiere a un espacio que no deber\u00eda existir. Imagen 36 Problema de espacio indebido destacado Una vez solucionados los problemas la consola muestra el aspecto que vemos en la imagen 37. Imagen 37 Sin problemas en los archivos abiertos Veamos ahora la propia terminal y sus iconos asociados. En la imagen 38 tenemos la informaci\u00f3n necesaria referente a esto. Imagen 38 Iconos de TERMINAL Barra de estado de VSCode \u00b6 Cuando no tenemos abierta ninguna carpeta ni \u00e1rea de trabajo la barra de estado se muestra en color morado, tal y como se observa en la imagen 39. Imagen 39 Barra de estado sin carpeta abierta Cuando tenemos abierta una carpeta esta barra se muestra en azul y en distintas partes de las misma se muestra informaci\u00f3n muy importante relativa al estado del editor y del documento en uso en ese momento. Si dejamos el cursor del rat\u00f3n situado sobre cualquiera de los elementos nos aparece un mensaje explicando ese apartado. Veamos alguno de ellos. En la imagen 40 vemos la informaci\u00f3n de la rama actual (el asterisco indica que hay tareas pendientes) y en la parte superior se muestran las ramas que tiene el proyecto y nos da la posibilidad de crear nuevas ramas. El icono de la derecha permite sincronizar los cambios que hacemos. Imagen 40 Ramas e informaci\u00f3n de su estado Lo siguiente que vemos en la barra de estado son los problemas del fichero actual, que vamos a analizar a continuaci\u00f3n. En la imagen 41 vemos un problema recurrente (flechas rojas) que se refiere a unas etiquetas de centrado que no pertenecen al lenguaje que estamos usando y que por tanto no podemos evitar como error. Por otro lado el problema destacado en amarillo se refiere al texto alternativo de la imagen que podemos omitir, pero que no es conveniente, especialmente si pensamos en una posible carga lenta en el navegador o m\u00e1s a\u00fan si pensamos en personas con visibilidad disminuida que no sabr\u00e1n que ocurre durante esa carga lenta si no hay texto alternativo. Es por tanto buena pr\u00e1ctica poner siempre ese texto. Imagen 41 An\u00e1lisis de problemas en archivo Atajos de teclado \u00b6 Hasta ahora hemos ido citando la forma de acceder a las distintas opciones de una o dos formas y hemos omitido siempre la de atajos de teclado que usualmente aparece asociada a la opci\u00f3n y es porque le vamos a dedicar este apartado en el que pondr\u00e9 simplemente los que yo mismo suelo utilizar mas a menudo. El lector adaptar\u00e1 a sus propias necesidades los que mas le interesen. Como cualquier editor, y yo dir\u00eda casi que cualquier programa, VSCode incluye los caracter\u00edsticos copia (Ctrl+C), corta (Ctrl+X) y pega (Ctrl+V) como atajos de teclado para edici\u00f3n. En la imagen 61 los vemos destacados. Otros atajos de edici\u00f3n que se suelen utilizar con asiduidad son los que vemos en la imagen 42. Imagen 42 Atajos deshacer, rehacer, buscar y reemplazar Las opciones de desplazamiento del cursor m\u00e1s usuales son las siguientes: Combinaci\u00f3n de teclas Acci\u00f3n que realiza Inicio Ir al principio de la l\u00ednea en la que se encuentra Fin Ir al final de la l\u00ednea en la que se encuentra Ctrl + Inicio Ir al principio del archivo actual Ctrl + Fin Ir al final del archivo actual Otro grupo interesante de atajos de teclado son las diferentes opciones de visualizaci\u00f3n o apariencia que tenemos disponibles en el men\u00fa Ver. En la imagen 43 vemos las disponibles junto a sus atajos. Imagen 43 Opciones de visualizaci\u00f3n El modo zen muestra el contenido de la pesta\u00f1a seleccionada ocupando toda la pantalla como vemos en la imagen 44. Observamos que tan solo se muestra el contenido del fichero sin barra de estado ni de men\u00fas y dem\u00e1s complementos evitando as\u00ed distracciones. Imagen 44 Vista en modo zen Para salir podemos pulsar la combinaci\u00f3n de teclas o dos veces la tecla ESC.","title":"Editor VSCode"},{"location":"Editor-VSCode/#editor-vscode","text":"","title":"Editor VSCode"},{"location":"Editor-VSCode/#introduccion-y-configuracion-inicial","text":"Seg\u00fan la Wikipedia, Visual Studio Code es un editor de c\u00f3digo fuente desarrollado por Microsoft para Windows, Linux y macOS. Incluye soporte para la depuraci\u00f3n, control integrado de Git, resaltado de sintaxis, finalizaci\u00f3n inteligente de c\u00f3digo, fragmentos y refactorizaci\u00f3n de c\u00f3digo. Es un proyecto de software libre que se distribuye bajo la licencia MIT, aunque los ejecutables se distribuyen bajo una licencia gratuita no libre. Para descargar VSCode visitamos y escogemos seg\u00fan nuestro sistema, en mi caso los paquetes Debian v\u00e1lidos para Ubuntu. Imagen 1 Descarga de VSCode Cuando iniciamos VSCode el aspecto que nos presenta es el que vemos en la imagen 2. Imagen 2 Pantalla inicial de VSCode Lo primero que vamos a hacer en configurar el idioma y para ellos hacemos clic en el icono de Extensiones de la barra lateral izquierda y procedemos seg\u00fan lo indicado en la imagen 3. Imagen 3 Configurar idioma en VSCode Una vez reiniciado VSCode ya tenemos el editor en espa\u00f1ol, como vemos en la imagen 4. Imagen 1 Entorno de VSCode configurado en idioma espa\u00f1ol","title":"Introducci\u00f3n y configuraci\u00f3n inicial"},{"location":"Editor-VSCode/#instalacion-de-extensiones-en-vscode","text":"Vamos a instalar el paquete Python en VSCode, para ello abrimos el programa y hacemos clic en el icono de extensiones y en el buscador tecleamos python y hacemos clic en el bot\u00f3n Install se\u00f1alado en la imagen 5. Imagen 5 Instalaci\u00f3n paquete Python Se inicia el proceso de instalaci\u00f3n que se ver\u00e1 de la forma que muestra la imagen 6. Imagen 6 Instalaci\u00f3n paquete Python en proceso Una vez finalizada la instalaci\u00f3n nos indicar\u00e1 que se requiere una recarga de Python, lo que hacemos clicando el bot\u00f3n se\u00f1alado en la imagen 7. Imagen 7 Recarga de Python Si necesitamos otras extensiones las podemos instalar de forma similar a las anteriores. Si ahora cerramos la pesta\u00f1a de bienvenida tendremos la expresi\u00f3n m\u00ednima se VSCode (imagen 8) y veremos de fondo los comando de inicio mas habituales. Imagen 8 Expresi\u00f3n m\u00ednima de VSCode","title":"Instalaci\u00f3n de extensiones en VSCode"},{"location":"Editor-VSCode/#el-explorador-de-vscode","text":"VSCode incorpora la utilidad de Abrir carpeta que resulta especialmente \u00fatil cuando tenemos que trabajar con un conjunto de archivos que se encuentran en una carpeta o directorio. Esta opci\u00f3n nos va a mostrar la lista de archivos contenidos en ese directorio para no tener que abrir de forma individualizada cada archivo. En la bienvenida ya est\u00e1 disponible la opci\u00f3n y siempre lo vamos a poder hacer o bien desde la barra de actividades o bien desde el men\u00fa Archivo. En la imagen 9 se muestra el proceso para abrir una carpeta desde el Explorador. Imagen 9 Abrir carpeta desde el Explorador Vemos que tambi\u00e9n se incorpora la opci\u00f3n de Clonar un repositorio directamente desde VSCode si conocemos la URL del mismo. Una vez localizada y abierta la carpeta con la que vamos a trabajar el Explorador se presenta como vemos en la imagen 10. Imagen 10 Carpeta de trabajo abierta En la imagen 10 observamos en modo \u00e1rbol los archivos y subdirectorios que contiene la carpeta abierta y que podemos abrir para su edici\u00f3n. Tambi\u00e9n se pueden ver una serie de cambios que iremos analizando poco a poco. Si necesitamos cerrar la carpeta tenemos la opci\u00f3n disponible en el men\u00fa Archivo, tal y como se muestra en la imagen 11. Imagen 11 Cerrar carpeta","title":"El Explorador de VSCode"},{"location":"Editor-VSCode/#configuracion-de-vscode","text":"Podemos acceder a las opciones de configuraci\u00f3n haciendo clic en el icono rueda dentada de la barra de actividades o bien desde el men\u00fa Archivo, como se observa en la imagen 12. Imagen 12 Opciones de configuraci\u00f3n de VSCode La configuraci\u00f3n por defecto del editor est\u00e1 suficientemente estudiada como para no necesitar ajustes aunque siempre es posible modificar cualquiera de las opciones disponibles a nuestro gusto. No nos vamos a detener en este tema pero si vamos a ver un poco m\u00e1s de la opci\u00f3n Configuraci\u00f3n propiamente dicha, que es la primera que aparece y que tambi\u00e9n es accesible con la combinaci\u00f3n de teclas [Ctrl+,]. Si accedemos a ella se nos abrir\u00e1n en la zona de trabajo las opciones de configuraci\u00f3n como vemos en la imagen 13. Imagen 13 Opciones de configuraci\u00f3n de VSCode Aqu\u00ed tenemos disponibles infinidad de opciones tanto de Usuario como del \u00c1rea de trabajo que podemos configurar seg\u00fan nuestras propias necesidades. A titulo de ejemplo vamos a ver como cambiar el tema color y tambi\u00e9n opciones referente a los iconos que aparecen asociados al explorador. Al tema de configuraci\u00f3n de color podemos acceder de cualquiera de las formas que se observan en la imagen 14. Imagen 14 Configuraci\u00f3n del tema color Observamos que el tema por defecto es el _Dark+_en el que vamos a permanecer. En la imagen 15 vemos el aspecto en dos configuraciones diferentes de color. Imagen 15 Tema color light+ Tema color alto contraste Tambi\u00e9n podemos modificar el tema iconos asociado a los archivos que se muestran en el explorador al que accedemos por cualquiera de los medios mostrados en la imagen 16. Imagen 16 Configuraci\u00f3n del tema iconos VSCode por defecto tan solo dispone de tres posibilidades que son las mostradas en la imagen 17. Imagen 17 Opciones por defecto de tema iconos Si accedemos seg\u00fan la imagen 18 podemos directamente entrar en la opci\u00f3n de instalar nuevos iconos. Imagen 18 Acceso r\u00e1pido a la opci\u00f3n de instalar iconos Una vez seleccionada la opci\u00f3n se nos mostrar\u00e1 algo similar a la imagen 19. En esta imagen observamos como hay disponibles iconos tanto para VSCode como para Material, que es la librer\u00eda que estamos utilizando. Vamos a instalar uno de cada para poder analizarlos. Imagen 19 Opciones para instalar temas de iconos","title":"Configuraci\u00f3n de VSCode"},{"location":"Editor-VSCode/#explorador-de-vscode","text":"Ya hemos visto anteriormente como abrir una carpeta desde el explorador y ahora vamos a ver algunas opciones de las que disponemos en el mismo. Para abrir un archivo lo seleccionamos con un clic en el explorador y a continuaci\u00f3n hacemos doble clic sobre el mismo. Cuando tenemos abierta una carpeta tenemos la posibilidad desde el mismo explorador de crear archivos, carpetas, actualizar y contraer carpetas, como se muestra en la imagen 20. Los iconos de estas tareas solamente son visibles cuando situamos el cursor del rat\u00f3n en la ventana del Explorador. Imagen 20 Opciones relativas al explorador En la parte superior del explorador tenemos la lista de archivos abiertos para edici\u00f3n as\u00ed como los iconos de las tareas posibles a realizar, tal y como se observa en la imagen 21. Imagen 21 Editores abiertos A veces resulta interesante tener abierto dos veces el mismo archivo para poder comparar dos partes del mismo que no podemos ver en una sola ventana. En la parte superior derecha tenemos el icono que lo hace posible tal y como observamos en la imagen 22, donde observamos que tenemos abierto el mismo archivo dos veces. Imagen 22 Opci\u00f3n de dividir editor Hay otra forma especialmente \u00fatil de a\u00f1adir archivos a la ventana de edici\u00f3n y establecer su disposici\u00f3n si existe ya alg\u00fan archivo abierto. Esto es haciendo clic sobre el mismo y arrastr\u00e1ndolo hasta dicha ventana. Existen tres formas de hacerlo y la explicaci\u00f3n la vamos a ver en la animaci\u00f3n correspondiente a cada una de ellas que sigue a continuaci\u00f3n. 1.- Abrir a pantalla completa 2.- Abrir en divisi\u00f3n o disposici\u00f3n vertical 3.- Abrir en divisi\u00f3n o disposici\u00f3n horizontal","title":"Explorador de VSCode"},{"location":"Editor-VSCode/#buscar-en-vscode","text":"El icono de la lupa es la forma m\u00e1s r\u00e1pida de acceder a las tareas de b\u00fasqueda. Un vez activado desde la barra de actividades tiene el aspecto de la imagen 23. Imagen 23 Buscar Asociados a la b\u00fasqueda hay tres iconos que de izquierda a derecha sirve para hacer coincidir may\u00fasculas y min\u00fasculas, solo palabras completas, usar expresiones regulares. Si necesitamos reemplazar las b\u00fasquedas por algo concreto basta con teclearlo en la ventana correspondiente que tiene como iconos asociados el de conservar may\u00fasculas y min\u00fasculas y el de reemplazar todo. El icono di\u00e9resis justo debajo de la ventana reemplazar nos permite filtrar en que archivos y carpetas buscar o excluirlos esos archivos para la b\u00fasqueda. En la imagen 24 vemos las opciones activadas. Imagen 24 Incluir / Excluir en la b\u00fasqueda Debemos tener presente que VSCode ya tiene en su configuraci\u00f3n la exclusi\u00f3n de algunas carpetas para la b\u00fasqueda. De cuales se trata lo podemos ver accediendo a la configuraci\u00f3n, tal y como observamos en la imagen 25. Imagen 25 Archivos desactivados para la b\u00fasqueda","title":"Buscar en VSCode"},{"location":"Editor-VSCode/#intellisense","text":"Es la funci\u00f3n de autocompletado usada en el entorno de desarrollo integrado Microsoft Visual Studio y tambi\u00e9n en el editor de c\u00f3digo Visual Studio Code. Visual Studio Code trae esta funcionalidad por defecto para JavaScript, TypeScript, CSS, HTML JSON, Less y Sass. Tambi\u00e9n existen extensiones para otros muchos lenguajes y vamos a ver como instalar alguna de ellas. En la imagen 26 vemos ls b\u00fasqueda y selecci\u00f3n de la que vamos a instalar en nuestro caso. Imagen 26 Instalaci\u00f3n de autocompletado para C++ Una vez instalada la extensi\u00f3n basta con crear un archivo nuevo y salvarlo como cpp y se mostrar\u00e1 algo similar a la imagen 27. Imagen 27 Habilitaci\u00f3n de la extensi\u00f3n autocompletar c++ Al pulsar en Mostrar recomendaciones se nos muestra la sugerencia de instalar la que vemos en la imagen 28. Imagen 28 Instalaci\u00f3n extension recomendada Una vez instalada la recomendaci\u00f3n nos situamos en el archivo creado al efecto y nada m\u00e1s comenzar a teclear suceder\u00e1 algo similar a lo que vemos en la imagen 29. El editor ya reconoce el lenguaje y nos muestra las sugerencias adecuadas. Imagen 29 Autocompletado en funcionamiento Pues bien, si escogemos la primera opci\u00f3n se nos crea la estructura b\u00e1sica de la funci\u00f3n principal de un programa C++ tal y como vemos en la imagen 30. Imagen 30 Resultado del autocompletado En la imagen 29 observamos que a la izquierda de cada sugerencia hay un icono y este tiene un determinado significado con el cual nos iremos familiarizando poco a poco con el uso. A titulo de ejemplo a continuaci\u00f3n vemos algunos de estos iconos y su significado. Iconos Significado Code snippet o fragmento de c\u00f3digo Palabras clave del lenguaje Valores, referencias y enumeraciones Atributos","title":"IntelliSense"},{"location":"Editor-VSCode/#terminal-de-comandos-integrado-en-vscode","text":"VSCode incorpora la posibilidad de mostrar una o varias terminales de comandos del sistema operativo donde se ejecuta en la ventana de trabajo y hay dos formas b\u00e1sicas de hacerlo, bien desde el men\u00fa Ver/Terminal o bien desde el men\u00fa Terminal/Nueva terminal . En cualquier caso el resultado lo vemos en la imagen 31. Imagen 31 Terminal de comandos El funcionamiento de este bash, terminal o consola es id\u00e9ntico al del sistema pero adem\u00e1s lleva asociada una barra con distintas tareas e iconos algunos de los cuales vamos a describir a continuaci\u00f3n. En la imagen 32 tenemos una captura de la tarea PROBLEMAS. Aqu\u00ed se nos muestran tanto el n\u00famero como una descripci\u00f3n de los problemas encontrados en los archivos que actualmente tengamos abiertos. Lo ideal es que ning\u00fan archivo tenga ning\u00fan tipo de advertencia. Pero no siempre ser\u00e1 posible, como nos va a ocurrir con las etiquetas HTML <center> </center> que ser\u00e1n marcadas como advertencia pero que al no pertenecer a MarkDown no se puede resolver. Imagen 32 Indicaci\u00f3n de los problemas encontrados en el c\u00f3digo En este caso nos indica dos problemas que vamos a analizar y resolver. En concreto las dos advertencias se refieren al fichero about.md como se observa en la imagen 33, donde adem\u00e1s se observa c\u00f3mo ambos problemas est\u00e1n se\u00f1alados. Cuando hacemos un clic sobre el problema este quedar\u00e1 se\u00f1alado en el archivo y aparecer\u00e1 una bombillita azul que nos dar\u00e1 opciones relativas al mismo. Imagen 33 Fichero en el que est\u00e1n los problemas El primer problema se refiere a que tras una linea de t\u00edtulo o cabecera debe ir una l\u00ednea en blanco y tenemos b\u00e1sicamente tres formas de solucionarlo: Insertar las l\u00ednea a mano. Hacer clic en la advertencia (la bombillita azul) para que se muestren las opciones disponibles y escoger una de ellas. En la imagen 34 vemos las opciones. Tambi\u00e9n podemos acceder a estas opciones si hacemos clic derecho en la consola sobre el problema en cuyo caso veremos algo como la imagen 35 con un par de opciones m\u00e1s disponibles. Imagen 34 Opciones disponibles en la correcci\u00f3n del problema Imagen 35 Otra opci\u00f3n de mostrar las opciones disponibles de correcci\u00f3n Ahora se\u00f1alamos el segundo problema tal y como se muestra en la imagen 36. En este caso se refiere a un espacio que no deber\u00eda existir. Imagen 36 Problema de espacio indebido destacado Una vez solucionados los problemas la consola muestra el aspecto que vemos en la imagen 37. Imagen 37 Sin problemas en los archivos abiertos Veamos ahora la propia terminal y sus iconos asociados. En la imagen 38 tenemos la informaci\u00f3n necesaria referente a esto. Imagen 38 Iconos de TERMINAL","title":"Terminal de comandos integrado en VSCode"},{"location":"Editor-VSCode/#barra-de-estado-de-vscode","text":"Cuando no tenemos abierta ninguna carpeta ni \u00e1rea de trabajo la barra de estado se muestra en color morado, tal y como se observa en la imagen 39. Imagen 39 Barra de estado sin carpeta abierta Cuando tenemos abierta una carpeta esta barra se muestra en azul y en distintas partes de las misma se muestra informaci\u00f3n muy importante relativa al estado del editor y del documento en uso en ese momento. Si dejamos el cursor del rat\u00f3n situado sobre cualquiera de los elementos nos aparece un mensaje explicando ese apartado. Veamos alguno de ellos. En la imagen 40 vemos la informaci\u00f3n de la rama actual (el asterisco indica que hay tareas pendientes) y en la parte superior se muestran las ramas que tiene el proyecto y nos da la posibilidad de crear nuevas ramas. El icono de la derecha permite sincronizar los cambios que hacemos. Imagen 40 Ramas e informaci\u00f3n de su estado Lo siguiente que vemos en la barra de estado son los problemas del fichero actual, que vamos a analizar a continuaci\u00f3n. En la imagen 41 vemos un problema recurrente (flechas rojas) que se refiere a unas etiquetas de centrado que no pertenecen al lenguaje que estamos usando y que por tanto no podemos evitar como error. Por otro lado el problema destacado en amarillo se refiere al texto alternativo de la imagen que podemos omitir, pero que no es conveniente, especialmente si pensamos en una posible carga lenta en el navegador o m\u00e1s a\u00fan si pensamos en personas con visibilidad disminuida que no sabr\u00e1n que ocurre durante esa carga lenta si no hay texto alternativo. Es por tanto buena pr\u00e1ctica poner siempre ese texto. Imagen 41 An\u00e1lisis de problemas en archivo","title":"Barra de estado de VSCode"},{"location":"Editor-VSCode/#atajos-de-teclado","text":"Hasta ahora hemos ido citando la forma de acceder a las distintas opciones de una o dos formas y hemos omitido siempre la de atajos de teclado que usualmente aparece asociada a la opci\u00f3n y es porque le vamos a dedicar este apartado en el que pondr\u00e9 simplemente los que yo mismo suelo utilizar mas a menudo. El lector adaptar\u00e1 a sus propias necesidades los que mas le interesen. Como cualquier editor, y yo dir\u00eda casi que cualquier programa, VSCode incluye los caracter\u00edsticos copia (Ctrl+C), corta (Ctrl+X) y pega (Ctrl+V) como atajos de teclado para edici\u00f3n. En la imagen 61 los vemos destacados. Otros atajos de edici\u00f3n que se suelen utilizar con asiduidad son los que vemos en la imagen 42. Imagen 42 Atajos deshacer, rehacer, buscar y reemplazar Las opciones de desplazamiento del cursor m\u00e1s usuales son las siguientes: Combinaci\u00f3n de teclas Acci\u00f3n que realiza Inicio Ir al principio de la l\u00ednea en la que se encuentra Fin Ir al final de la l\u00ednea en la que se encuentra Ctrl + Inicio Ir al principio del archivo actual Ctrl + Fin Ir al final del archivo actual Otro grupo interesante de atajos de teclado son las diferentes opciones de visualizaci\u00f3n o apariencia que tenemos disponibles en el men\u00fa Ver. En la imagen 43 vemos las disponibles junto a sus atajos. Imagen 43 Opciones de visualizaci\u00f3n El modo zen muestra el contenido de la pesta\u00f1a seleccionada ocupando toda la pantalla como vemos en la imagen 44. Observamos que tan solo se muestra el contenido del fichero sin barra de estado ni de men\u00fas y dem\u00e1s complementos evitando as\u00ed distracciones. Imagen 44 Vista en modo zen Para salir podemos pulsar la combinaci\u00f3n de teclas o dos veces la tecla ESC.","title":"Atajos de teclado"},{"location":"GIT_VSCode/","text":"Git en VSCode \u00b6 Cosas b\u00e1sicas de Git \u00b6 Git es un software libre de gesti\u00f3n de versiones, lo que viene a significar que es un sistema que nos ayuda a controlar y gestionar los cambios generados en nuestro trabajo, ya sea software, documentaci\u00f3n o cualquier otro uso. Fue creado por Linus Torvalds para la comunidad Linux hacia el a\u00f1o 2005. La relaci\u00f3n de tareas fundamentales en git y que vamos a describir en este tutorial son las siguientes: Configurar e inicializar un repositorio Iniciar y detener el seguimiento de archivos Preparar cambios con stage Confirmar cambios con commit Configurar git para que ignore ciertos archivos Corregir errores Recorrer la historia de nuestro proyecto y ver cambios entre confirmaciones Enviar con push y recibir con pull de repositorios remotos Es necesario conocer, aunque sea brevemente, en que consisten estos pasos para poder efectuarlos con garantias desde VSCode. Se remite al lector a la webgraf\u00eda para consultar estos aspectos, y mas concretamente al libro de git. Desde la paleta de comandos, disponible como se observa en la imagen 1, podemos hacer uso de comandos git. Imagen 1 Acceso a la paleta de comandos En la imagen 2 vemos la paleta de comandos con el comando clone de git y como una vez ejecutado nos pide la direcci\u00f3n URL a clonar. Imagen 2 Comando git clone Solicitud URL para clonar Git en la barra de estado de VSCode \u00b6 En la barra de estado que se muestra en la parte inferior de la ventana de VSCode se muestran funciones e informaci\u00f3n de Git muy \u00fatiles. A la izquierda se muestra el nombre de la rama de trabajo actual. Si modificamos los archivos con seguimiento en la rama de trabajo, la barra de estado agrega un s\u00edmbolo de asterisco (*) junto al nombre de la rama, tal y como se observa en la imagen 3. Imagen 3 Barra de estado: Rama de trabajo actual mostrando cambios Cuando agreguemos los cambios al stage , el asterisco se va a convertir en un signo m\u00e1s (+) para indicar que se han agregado. Cuando confirmemos los cambios staged , ese signo m\u00e1s desaparece y solamente se mostrar\u00e1 el nombre de la rama. A la derecha del nombre de la rama aparece un icono en forma de un c\u00edrculo con flechas que indica que el sistema debe sincronizar cambios. En la imagen 4 vemos este icono. Imagen 4 Barra de estado: icono sincronizar cambios Ese icono con forma de circulo se convierte en una nube con una flecha hacia arriba cuando el sistema est\u00e1 listo para publicar cambios. Cambios en archivos \u00b6 El editor VSCode dispone en su barra de actividades de un acceso a las herramientas git disponibles por defecto y, como veremos mas adelante, tambi\u00e9n se le pueden instalar complementos para este tema. En la imagen 5 observamos es icono de acceso y vemos un n\u00famero en un circulo azul que nos indica que hay un n\u00famero determinado de cambios pendientes de sincronizar con la nube. El n\u00famero indica cuantos cambios hay pendientes, tanto staged como unstaged (con seguimiento y sin seguimiento)) y listos para confirmarse. El n\u00famero se incrementa a medida que realicemos cambios en los archivos. Imagen 5 Herramientas GIT en VSCode Este n\u00famero se corresponde con la aparici\u00f3n de un asterisco (*) en la barra de estado junto al nombre de la rama en la que estamos trabajando. Una vez confirmemos, este icono con n\u00famero desaparece asi como el asterisco de la barra de estado. Tambi\u00e9n podemos consultar esto desde una terminal ejecutando un git status que nos devolver\u00e1 informaci\u00f3n como la que vemos en la imagen 6. Lo habitual ser\u00e1 usar una combinaci\u00f3n de operaciones de Git desde la l\u00ednea de comandos y funciones de Visual Studio Code integradas con Git. Imagen 6 Consulta del estado de git desde una terminal Ver cambios en Control de c\u00f3digo fuente \u00b6 Si pulsamos el icono de Control de c\u00f3digo fuente de la barra de actividades (como vemos en la imagen 7) podremos ver los cambios staged y unstaged . Imagen 7 Acceso a Control de cambios Si hacemos clic, por ejemplo, en el archivo que vemos en la imagen 8 observamos una serie de iconos e informaci\u00f3n asociada al mismo que vamos a describir seguidamente. Imagen 8 Informaci\u00f3n de control de seguimiento Lo primero que observamos es que el archivo aparece en cambios . Los iconos de izquierda a derecha son: Archivo : permite abrir el archivo en el editor . Signo m\u00e1s (+) : Al pulsar este icono se agregan los cambios al \"stage\" y se confirman. Flecha sentido antihorario : para descartar los cambios y revertir el archivo a su estado en la confirmaci\u00f3n anterior. N\u00famero : indica los problemas que el editor encuentra en el archivo, tal y como se describi\u00f3 para la terminal. En este caso concreto 9+ nos est\u00e1 indicando que hay m\u00e1s de 9 problemas. Letra : Si es una M nos indica que el archivo exist\u00eda anteriormente y ha sido modificado y si es una U nos est\u00e1 indicando que el archivo es nuevo y no tiene seguimiento. Moviendo el cursor por los distintos archivos que se muestran en cambios podemos ir viendo toda la informaci\u00f3n descrita y realizando las acciones asociadas a los iconos. Si presionamos el signo m\u00e1s por ejemplo en el archivo i1.png este archivo se traslada a la secci\u00f3n cambios almacenados provisionalmente o stage . Vemos el resultado en la imagen 9, donde se observan los iconos asociados al archivo para esta secci\u00f3n. Imagen 9 Archivo cambiado a stage Podemos ir a\u00f1adiendo los archivos uno a uno de esta forma o bien hacerlo desde Cambios (imagen 10) para agregarlos todos a un tiempo. Imagen 10 Almacenar todos los cambios El signo menos (-) permite sacar el archivo a la secci\u00f3n Cambios , el icono archivo nos permite abrirlo y en este caso la letra A indica que se ha a\u00f1adido (Add) al \u00edndice. Es importante entender que en esta situaci\u00f3n estos cambios son locales y no est\u00e1n sincronizados con la nube y tamb\u00e9n que observemos los cambios que se producen en la barra de estado para acostumbrarnos a reconocer el estado de nuestro trabajo. Introducir cambios, Commit \u00b6 En el Control de c\u00f3digo fuente se muestran varios iconos en la esquina superior derecha que encontramos destacados en amarillo en la imagen 10. El icono de marca de verificaci\u00f3n sirve para empezar a confirmar los cambios. Si pulsamos este icono se nos presenta la situaci\u00f3n de la imagen 11. Imagen 11 Confirmar cambios La intenci\u00f3n es agregar un mensaje de confirmaci\u00f3n al commit que confirmamos con Enter (o bien Ctrl + Enter seg\u00fan donde hagamos clic) y como observamos se nos indica a que rama va a ser confirmado. Vamos en nuestro caso a teclear Confirmar i1.png . Hay que tener en cuenta que este mensaje se suele restringir a 50 caracteres. Una vez confirmado el cambio podemos observar que en la barra de estado (imagen 12) aparece un mensaje indicador de que hay un archivo pendiente de sincronizar. Imagen 12 Barra de estado: sincronizar Como se observa en la imagen 12 est\u00e1 el icono de sincronizaci\u00f3n y a su derecha una flecha hacia abajo con un cero, que indica que no hay confirmaciones pendientes de sincronizar o extraer. A la derecha hay una flecha hacia arriba con un 1 junto a ella, que indica que hay una confirmaci\u00f3n para insertar en el repositorio. Si hacemos clic en el icono se mostrar\u00e1 un mensaje (imagen 13) relativo a que vamos a realizar las operaciones git pull y, despu\u00e9s, una operaci\u00f3n git push . Imagen 13 Sincronizar: git pull y git push La operaci\u00f3n git pull incorpora los cambios de un repositorio remoto a la rama local y la operaci\u00f3n git push hace lo contrario, incorpora los cambios de una rama local a un repositorio. Hacer clic en el icono sincronizar de la barra de estado realiza ambas operaciones. Si queremos o tenemos la necesidad de realizar estas operaciones por separado podemos recurrir a teclearlas en una terminal o bien se\u00f1eccionarla desde las disponibles cuando hacems clic en el icono di\u00e9resis de la barra de Control de c\u00f3digo fuente. En la imagen 14 vemos las opciones disponibles. Imagen 14 Acciones de control de codigo fuente Si ahora vamos al directorio correspondiente en nuestro github podemos comprobar como ya est\u00e1 el archivo a\u00f1adido a la rama master, tal y como se observa en la imagen 15. Imagen 15 Verificacion en Github del Push realizado Analisis de cambios en archivos \u00b6 Una herramienta muy \u00fatil de VSCode es la que vamos a ver seguidamente. Como observamos en la imagen 16 en el archivo se\u00f1alado se han realizado cambios. Imagen 16 Archivo que ha sufrido cambios Pero \u00bfcuales son esos cambios?. Pues bien, si hacemos clic sobre el archivo y ocultamos el navegador haciendo clic sobre el icono de control de c\u00f3digo veremos una ventana como la de la imagen 17, donde vemos dos columnas, la de la izquierda muestra el archivo antes de realizar cambios y la de la derecha muestra los cambios realizados. Imagen 17 Comparaci\u00f3n del archivo con cambios Esto se puede conseguir directamente desde la l\u00ednea de comandos en una terminal tecleando git status que mostrar\u00e1 en que archivo se han realizado los cambios y despu\u00e9s git diff <nombre del archivo> del que mostrar las diferencias. En la imagen 18 vemos el resultado de ejecutar estos comandos. Imagen 18 Resultado de git status Resultado de git diff A\u00f1adir extensiones Git \u00b6 Vamos a a\u00f1adir una extensi\u00f3n muy interesante de VSCode que se llama GitLens y que agrega muchas funcionalidades. En la imagen 19 vemos el resultado de buscar e instalar esta extensi\u00f3n. Imagen 19 Autorun de GitLens tras instalar GitLens instalado Vamos a ver las principales funcionalidades de GitLens : * Cuando nos situamos sobre cualquier linea (imagen 20), incluso en la que estamos escribiendo, se nos informa del autor del \u00faltimo commit, cuando se hizo y si los cambios han sido confirmados o no. Imagen 20 Informaci\u00f3n de GitLens Si dejamos unos instante el cursor sobre la informaci\u00f3n esta ser\u00e1 ampliada en una ventana emergente tal y como observamos en la imagen 21. Imagen 21 Informaci\u00f3n de GitLens ampliada Una segunda funcionalidad interesante de GitLens es la que observamos en la imagen 22. Se trata de unas l\u00edneas verticales de color azul o verde que indican los cambios realizados en el archivo, en concreto el color azul indica que la l\u00ednea ha sido modificada y el color verde que ha sido a\u00f1adida. En ambos casos, si situamos el cursor sobre la l\u00ednea esta de engrosa. Imagen 22 Informaci\u00f3n de GitLens: modificaci\u00f3n o nuevo Si hacemos clic sobre una de las l\u00edneas, por ejemplo la modificada, se nos despliega la informaci\u00f3n que vemos en la imagen 23. Imagen 23 Informaci\u00f3n de GitLens: desiegue Podemos observar como se realiza la comparaci\u00f3n de la linea antes y despu\u00e9s de modificarla y muy importante es que para esta modificaci\u00f3n (no para todo el archivo) disponemos de las herramientas asociadas a control de c\u00f3digo, pero que si las usamos tan solo se aplican a esta l\u00ednea. Si hacemos clic sobre el icono de GitLen se nos despliegan las funcionalidades que tiene la extensi\u00f3n y que van desde la informaci\u00f3n del repositorio o del archivo, permite realizar comparaciones (igual que git staff ) e incluso buscar commits. En la imagen 24 las vemos. Imagen 24 Funcionalidades de GitLens Creaci\u00f3n del archivo README.md remoto. Git pull \u00b6 Para ver el funcionamiento de la orden git pull vamos a crear un archivo en la nube, para ello nos dirigimos al repositorio, donde nos encontramos con la situaci\u00f3n que vemos en la image 25. Imagen 25 Creaci\u00f3n en la nube de README.md Si hacemos clic en el bot\u00f3n se\u00f1alado se nos crea la estructura b\u00e1sica del archivo, tal y como observamos en la imagen 26, donde ya hemos a\u00f1adido algunas l\u00edneas. Imagen 26 El archivo README.md con su contenido inicial Si nos desplazamos hacia abajo en la p\u00e1gina nos encontramos con la informaci\u00f3n para commit que hacemos sin modificar el mensaje por defecto, tal y como se observa en la imagen 27. Imagen 27 Realizamos commit del archivo README.md El resultado final en la nube lo vemos en la imagen 28, donde se observa aque ya existe el archivo y su aspecto. Imagen 28 Archivo README.md creado L\u00f3gicamente este archivo no lo tenemos en el repo local. Disponemos de varias formas de hacer que esto se solucione. Desde control de cambios escogemos la opci\u00f3n que vemos en la imagen 29 que se corresponde con git pull . Imagen 29 Acceso a pull Nos va a mostrar una ventana solicitando la selecci\u00f3n del origen remoto del que hacer pull, tal y como observamos en la imagen 30. Imagen 30 Selecci\u00f3n del origen remoto Escogemos la rama de donde vamos a realizar la extracci\u00f3n, como se observa en la imagen 31. Imagen 31 Selecci\u00f3n de la rama remota En unos instantes el aspecto que toma VSCode es el que vemos en la imagen 32. Imagen 32 Reflejo de los cambios para pull Cuando confirmemos los cambios nos aparecer\u00e1 en el repo local el archivo creado en la nube, tal y como se observa en la imagen 33. Imagen 33 Acci\u00f3n pull finalizada Observaci\u00f3n final \u00b6 Esto que hemos visto es tan solo lo imprescindible de Git para poder trabajar de forma local y poder reflejar los cambios en la nube pero en ning\u00fan caso es informaci\u00f3n completa de Git.","title":"Git en VSCode"},{"location":"GIT_VSCode/#git-en-vscode","text":"","title":"Git en VSCode"},{"location":"GIT_VSCode/#cosas-basicas-de-git","text":"Git es un software libre de gesti\u00f3n de versiones, lo que viene a significar que es un sistema que nos ayuda a controlar y gestionar los cambios generados en nuestro trabajo, ya sea software, documentaci\u00f3n o cualquier otro uso. Fue creado por Linus Torvalds para la comunidad Linux hacia el a\u00f1o 2005. La relaci\u00f3n de tareas fundamentales en git y que vamos a describir en este tutorial son las siguientes: Configurar e inicializar un repositorio Iniciar y detener el seguimiento de archivos Preparar cambios con stage Confirmar cambios con commit Configurar git para que ignore ciertos archivos Corregir errores Recorrer la historia de nuestro proyecto y ver cambios entre confirmaciones Enviar con push y recibir con pull de repositorios remotos Es necesario conocer, aunque sea brevemente, en que consisten estos pasos para poder efectuarlos con garantias desde VSCode. Se remite al lector a la webgraf\u00eda para consultar estos aspectos, y mas concretamente al libro de git. Desde la paleta de comandos, disponible como se observa en la imagen 1, podemos hacer uso de comandos git. Imagen 1 Acceso a la paleta de comandos En la imagen 2 vemos la paleta de comandos con el comando clone de git y como una vez ejecutado nos pide la direcci\u00f3n URL a clonar. Imagen 2 Comando git clone Solicitud URL para clonar","title":"Cosas b\u00e1sicas de Git"},{"location":"GIT_VSCode/#git-en-la-barra-de-estado-de-vscode","text":"En la barra de estado que se muestra en la parte inferior de la ventana de VSCode se muestran funciones e informaci\u00f3n de Git muy \u00fatiles. A la izquierda se muestra el nombre de la rama de trabajo actual. Si modificamos los archivos con seguimiento en la rama de trabajo, la barra de estado agrega un s\u00edmbolo de asterisco (*) junto al nombre de la rama, tal y como se observa en la imagen 3. Imagen 3 Barra de estado: Rama de trabajo actual mostrando cambios Cuando agreguemos los cambios al stage , el asterisco se va a convertir en un signo m\u00e1s (+) para indicar que se han agregado. Cuando confirmemos los cambios staged , ese signo m\u00e1s desaparece y solamente se mostrar\u00e1 el nombre de la rama. A la derecha del nombre de la rama aparece un icono en forma de un c\u00edrculo con flechas que indica que el sistema debe sincronizar cambios. En la imagen 4 vemos este icono. Imagen 4 Barra de estado: icono sincronizar cambios Ese icono con forma de circulo se convierte en una nube con una flecha hacia arriba cuando el sistema est\u00e1 listo para publicar cambios.","title":"Git en la barra de estado de VSCode"},{"location":"GIT_VSCode/#cambios-en-archivos","text":"El editor VSCode dispone en su barra de actividades de un acceso a las herramientas git disponibles por defecto y, como veremos mas adelante, tambi\u00e9n se le pueden instalar complementos para este tema. En la imagen 5 observamos es icono de acceso y vemos un n\u00famero en un circulo azul que nos indica que hay un n\u00famero determinado de cambios pendientes de sincronizar con la nube. El n\u00famero indica cuantos cambios hay pendientes, tanto staged como unstaged (con seguimiento y sin seguimiento)) y listos para confirmarse. El n\u00famero se incrementa a medida que realicemos cambios en los archivos. Imagen 5 Herramientas GIT en VSCode Este n\u00famero se corresponde con la aparici\u00f3n de un asterisco (*) en la barra de estado junto al nombre de la rama en la que estamos trabajando. Una vez confirmemos, este icono con n\u00famero desaparece asi como el asterisco de la barra de estado. Tambi\u00e9n podemos consultar esto desde una terminal ejecutando un git status que nos devolver\u00e1 informaci\u00f3n como la que vemos en la imagen 6. Lo habitual ser\u00e1 usar una combinaci\u00f3n de operaciones de Git desde la l\u00ednea de comandos y funciones de Visual Studio Code integradas con Git. Imagen 6 Consulta del estado de git desde una terminal","title":"Cambios en archivos"},{"location":"GIT_VSCode/#ver-cambios-en-control-de-codigo-fuente","text":"Si pulsamos el icono de Control de c\u00f3digo fuente de la barra de actividades (como vemos en la imagen 7) podremos ver los cambios staged y unstaged . Imagen 7 Acceso a Control de cambios Si hacemos clic, por ejemplo, en el archivo que vemos en la imagen 8 observamos una serie de iconos e informaci\u00f3n asociada al mismo que vamos a describir seguidamente. Imagen 8 Informaci\u00f3n de control de seguimiento Lo primero que observamos es que el archivo aparece en cambios . Los iconos de izquierda a derecha son: Archivo : permite abrir el archivo en el editor . Signo m\u00e1s (+) : Al pulsar este icono se agregan los cambios al \"stage\" y se confirman. Flecha sentido antihorario : para descartar los cambios y revertir el archivo a su estado en la confirmaci\u00f3n anterior. N\u00famero : indica los problemas que el editor encuentra en el archivo, tal y como se describi\u00f3 para la terminal. En este caso concreto 9+ nos est\u00e1 indicando que hay m\u00e1s de 9 problemas. Letra : Si es una M nos indica que el archivo exist\u00eda anteriormente y ha sido modificado y si es una U nos est\u00e1 indicando que el archivo es nuevo y no tiene seguimiento. Moviendo el cursor por los distintos archivos que se muestran en cambios podemos ir viendo toda la informaci\u00f3n descrita y realizando las acciones asociadas a los iconos. Si presionamos el signo m\u00e1s por ejemplo en el archivo i1.png este archivo se traslada a la secci\u00f3n cambios almacenados provisionalmente o stage . Vemos el resultado en la imagen 9, donde se observan los iconos asociados al archivo para esta secci\u00f3n. Imagen 9 Archivo cambiado a stage Podemos ir a\u00f1adiendo los archivos uno a uno de esta forma o bien hacerlo desde Cambios (imagen 10) para agregarlos todos a un tiempo. Imagen 10 Almacenar todos los cambios El signo menos (-) permite sacar el archivo a la secci\u00f3n Cambios , el icono archivo nos permite abrirlo y en este caso la letra A indica que se ha a\u00f1adido (Add) al \u00edndice. Es importante entender que en esta situaci\u00f3n estos cambios son locales y no est\u00e1n sincronizados con la nube y tamb\u00e9n que observemos los cambios que se producen en la barra de estado para acostumbrarnos a reconocer el estado de nuestro trabajo.","title":"Ver cambios en Control de c\u00f3digo fuente"},{"location":"GIT_VSCode/#introducir-cambios-commit","text":"En el Control de c\u00f3digo fuente se muestran varios iconos en la esquina superior derecha que encontramos destacados en amarillo en la imagen 10. El icono de marca de verificaci\u00f3n sirve para empezar a confirmar los cambios. Si pulsamos este icono se nos presenta la situaci\u00f3n de la imagen 11. Imagen 11 Confirmar cambios La intenci\u00f3n es agregar un mensaje de confirmaci\u00f3n al commit que confirmamos con Enter (o bien Ctrl + Enter seg\u00fan donde hagamos clic) y como observamos se nos indica a que rama va a ser confirmado. Vamos en nuestro caso a teclear Confirmar i1.png . Hay que tener en cuenta que este mensaje se suele restringir a 50 caracteres. Una vez confirmado el cambio podemos observar que en la barra de estado (imagen 12) aparece un mensaje indicador de que hay un archivo pendiente de sincronizar. Imagen 12 Barra de estado: sincronizar Como se observa en la imagen 12 est\u00e1 el icono de sincronizaci\u00f3n y a su derecha una flecha hacia abajo con un cero, que indica que no hay confirmaciones pendientes de sincronizar o extraer. A la derecha hay una flecha hacia arriba con un 1 junto a ella, que indica que hay una confirmaci\u00f3n para insertar en el repositorio. Si hacemos clic en el icono se mostrar\u00e1 un mensaje (imagen 13) relativo a que vamos a realizar las operaciones git pull y, despu\u00e9s, una operaci\u00f3n git push . Imagen 13 Sincronizar: git pull y git push La operaci\u00f3n git pull incorpora los cambios de un repositorio remoto a la rama local y la operaci\u00f3n git push hace lo contrario, incorpora los cambios de una rama local a un repositorio. Hacer clic en el icono sincronizar de la barra de estado realiza ambas operaciones. Si queremos o tenemos la necesidad de realizar estas operaciones por separado podemos recurrir a teclearlas en una terminal o bien se\u00f1eccionarla desde las disponibles cuando hacems clic en el icono di\u00e9resis de la barra de Control de c\u00f3digo fuente. En la imagen 14 vemos las opciones disponibles. Imagen 14 Acciones de control de codigo fuente Si ahora vamos al directorio correspondiente en nuestro github podemos comprobar como ya est\u00e1 el archivo a\u00f1adido a la rama master, tal y como se observa en la imagen 15. Imagen 15 Verificacion en Github del Push realizado","title":"Introducir cambios, Commit"},{"location":"GIT_VSCode/#analisis-de-cambios-en-archivos","text":"Una herramienta muy \u00fatil de VSCode es la que vamos a ver seguidamente. Como observamos en la imagen 16 en el archivo se\u00f1alado se han realizado cambios. Imagen 16 Archivo que ha sufrido cambios Pero \u00bfcuales son esos cambios?. Pues bien, si hacemos clic sobre el archivo y ocultamos el navegador haciendo clic sobre el icono de control de c\u00f3digo veremos una ventana como la de la imagen 17, donde vemos dos columnas, la de la izquierda muestra el archivo antes de realizar cambios y la de la derecha muestra los cambios realizados. Imagen 17 Comparaci\u00f3n del archivo con cambios Esto se puede conseguir directamente desde la l\u00ednea de comandos en una terminal tecleando git status que mostrar\u00e1 en que archivo se han realizado los cambios y despu\u00e9s git diff <nombre del archivo> del que mostrar las diferencias. En la imagen 18 vemos el resultado de ejecutar estos comandos. Imagen 18 Resultado de git status Resultado de git diff","title":"Analisis de cambios en archivos"},{"location":"GIT_VSCode/#anadir-extensiones-git","text":"Vamos a a\u00f1adir una extensi\u00f3n muy interesante de VSCode que se llama GitLens y que agrega muchas funcionalidades. En la imagen 19 vemos el resultado de buscar e instalar esta extensi\u00f3n. Imagen 19 Autorun de GitLens tras instalar GitLens instalado Vamos a ver las principales funcionalidades de GitLens : * Cuando nos situamos sobre cualquier linea (imagen 20), incluso en la que estamos escribiendo, se nos informa del autor del \u00faltimo commit, cuando se hizo y si los cambios han sido confirmados o no. Imagen 20 Informaci\u00f3n de GitLens Si dejamos unos instante el cursor sobre la informaci\u00f3n esta ser\u00e1 ampliada en una ventana emergente tal y como observamos en la imagen 21. Imagen 21 Informaci\u00f3n de GitLens ampliada Una segunda funcionalidad interesante de GitLens es la que observamos en la imagen 22. Se trata de unas l\u00edneas verticales de color azul o verde que indican los cambios realizados en el archivo, en concreto el color azul indica que la l\u00ednea ha sido modificada y el color verde que ha sido a\u00f1adida. En ambos casos, si situamos el cursor sobre la l\u00ednea esta de engrosa. Imagen 22 Informaci\u00f3n de GitLens: modificaci\u00f3n o nuevo Si hacemos clic sobre una de las l\u00edneas, por ejemplo la modificada, se nos despliega la informaci\u00f3n que vemos en la imagen 23. Imagen 23 Informaci\u00f3n de GitLens: desiegue Podemos observar como se realiza la comparaci\u00f3n de la linea antes y despu\u00e9s de modificarla y muy importante es que para esta modificaci\u00f3n (no para todo el archivo) disponemos de las herramientas asociadas a control de c\u00f3digo, pero que si las usamos tan solo se aplican a esta l\u00ednea. Si hacemos clic sobre el icono de GitLen se nos despliegan las funcionalidades que tiene la extensi\u00f3n y que van desde la informaci\u00f3n del repositorio o del archivo, permite realizar comparaciones (igual que git staff ) e incluso buscar commits. En la imagen 24 las vemos. Imagen 24 Funcionalidades de GitLens","title":"A\u00f1adir extensiones Git"},{"location":"GIT_VSCode/#creacion-del-archivo-readmemd-remoto-git-pull","text":"Para ver el funcionamiento de la orden git pull vamos a crear un archivo en la nube, para ello nos dirigimos al repositorio, donde nos encontramos con la situaci\u00f3n que vemos en la image 25. Imagen 25 Creaci\u00f3n en la nube de README.md Si hacemos clic en el bot\u00f3n se\u00f1alado se nos crea la estructura b\u00e1sica del archivo, tal y como observamos en la imagen 26, donde ya hemos a\u00f1adido algunas l\u00edneas. Imagen 26 El archivo README.md con su contenido inicial Si nos desplazamos hacia abajo en la p\u00e1gina nos encontramos con la informaci\u00f3n para commit que hacemos sin modificar el mensaje por defecto, tal y como se observa en la imagen 27. Imagen 27 Realizamos commit del archivo README.md El resultado final en la nube lo vemos en la imagen 28, donde se observa aque ya existe el archivo y su aspecto. Imagen 28 Archivo README.md creado L\u00f3gicamente este archivo no lo tenemos en el repo local. Disponemos de varias formas de hacer que esto se solucione. Desde control de cambios escogemos la opci\u00f3n que vemos en la imagen 29 que se corresponde con git pull . Imagen 29 Acceso a pull Nos va a mostrar una ventana solicitando la selecci\u00f3n del origen remoto del que hacer pull, tal y como observamos en la imagen 30. Imagen 30 Selecci\u00f3n del origen remoto Escogemos la rama de donde vamos a realizar la extracci\u00f3n, como se observa en la imagen 31. Imagen 31 Selecci\u00f3n de la rama remota En unos instantes el aspecto que toma VSCode es el que vemos en la imagen 32. Imagen 32 Reflejo de los cambios para pull Cuando confirmemos los cambios nos aparecer\u00e1 en el repo local el archivo creado en la nube, tal y como se observa en la imagen 33. Imagen 33 Acci\u00f3n pull finalizada","title":"Creaci\u00f3n del archivo README.md remoto. Git pull"},{"location":"GIT_VSCode/#observacion-final","text":"Esto que hemos visto es tan solo lo imprescindible de Git para poder trabajar de forma local y poder reflejar los cambios en la nube pero en ning\u00fan caso es informaci\u00f3n completa de Git.","title":"Observaci\u00f3n final"},{"location":"Libreria-Material/","text":"El archivo mkdocks.yml. Librer\u00eda Material \u00b6 Vamos a analizar el archivo mkdocs.yml de la plantilla que estamos utilizando en un momento determinado de elaboraci\u00f3n de esta documentaci\u00f3n y en base a los contenidos que encontramos en la webgraf\u00eda . En la imagen 1 observamos el primer apartado sobre la informaci\u00f3n b\u00e1sica del taller Imagen 1 Apartado 1. Introducci\u00f3n al taller Vamos a relacionar cada punto del apartado 1 con su significado y su reflejo en el navegador. * site_name . Es el nombre del sitio web * site_description . Aqu\u00ed ponemos la descripci\u00f3n de nuestro sitio web y el apartado forma parte de los metadatos que utilizar\u00e1 el script Python que traduce markdown a html y ser\u00e1 usado como un meta atributo. * site_autor . Metadato correspondiente a la autoria del sitio web. * site_url . La direcci\u00f3n url que se asigna al activar gh-pages en la creaci\u00f3n del repositorio. En la imagen 2 vemos algunos de estos puntos reflejados. Imagen 2 Apartado 1 visto en el navegador En la imagen 3 vemos el apartado segundo que en nuestro caso est\u00e1 compuesto por: repo_name . Nombre del repositorio que junto con repo_url conforman el enlace al repositorio. repo_url . Direcci\u00f3n url del repositorio. El nombre del repositorio aparece junto al recuadro de b\u00fasqueda o en la barra de navegaci\u00f3n, dependiendo del tama\u00f1o de la ventana, tal y como se ha representado en la imagen 2. edit_uri . Ruta de acceso desde la base del directorio al repo_url cuando se visualiza directamente una p\u00e1gina. Imagen 3 Apartado 2. Repositorio El apartado 3. Copyright se muestra en el navegador de la forma que vemos en la imagen 4. Imagen 4 Copyright El punto 4 se refiere a los enlaces a redes sociales que se pueden mostrar en el pie de p\u00e1gina usando la fuente FontAwesome . El par\u00e1metro type mostrar\u00e1 el nombre del servicio, y link la URL a enlazar. En la imagen 5 vemos una posible configuraci\u00f3n que es probable que con el servidor local no tenga efecto o no de problemas, en cuyo caso podemos comentar estas l\u00edneas y etiquetar la tarea como TODO: para descomentarla en el momento de hacer el despliegue final. Imagen 5 Enlaces a RRSS El apartado 5 configura el \u00edndice de navegaci\u00f3n que se muestra en el navegador. En la imagen 6 vemos parte del mismo para esta documentaci\u00f3n. Imagen 6 Configuraci\u00f3n del \u00edndice de navegaci\u00f3n En la imagen 7 vemos el aspecto de este \u00edndice en el navegador. Imagen 7 Aspecto del \u00edndice de navegaci\u00f3n en un navegador El apartado 6. Google Analytics permite analizar el uso de nuestro repositorio mediante la integraci\u00f3n de esta herramienta. En nuestro caso no la vamos a utilizar. El apartado 7. Configuraci\u00f3n del tema nos va a permitir adaptar, dentro de las opciones disponibles, el aspecto final de nuestro sitio web. Activamos las modificaciones del tema Material configuran mkdocs.yml como vemos en la imagen 8. Imagen 8 Modificaciones del tema Material En nuestro caso vamos a configurar los aspectos que vemos en la imagen 9 y que explicamos un poco mas a fondo seguidamente. Imagen 9 Configuraciones del tema Material Lo primero que hacemos es configurar los colores que tienen como valores posibles red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey , blue grey y white . Los \u00faltimos cuatro solo pueden usarse como primary . En la imagen 10 vemos destacados los de nuestra configuraci\u00f3n. Imagen 10 Configuraci\u00f3n de colores En este enlace podemos comprobar visualmente el funcionamiento de estos colores. A continuaci\u00f3n tenemos la configuraci\u00f3n de fuentes, que por defecto son Roboto y Roboto Mono . Estas fuentes forman parte de Google Fonts y podemos cambiarlas por otras. Los siguiente que aparece es el logo y el favicom que en mi caso configuro con la misma imagen. El favicon se refiere a un icono de 16x16 px (o 32x32 px) que sirve para identificar un sitio web en las pesta\u00f1as del navegador. El icono debe tener una resoluci\u00f3n m\u00ednima de 128x128 y se aconseja que presente suficiente constraste con el color de fondo. En la imagen 11 vemos estos dos elementos en el navegador. Imagen 11 Temas favicon e icono Seguidamente se configura el idioma como espa\u00f1ol y tambi\u00e9n los idiomas de b\u00fasqueda como espa\u00f1ol e ingl\u00e9s. En la imagen 12 vemos esta configuraci\u00f3n y en el enlace podemos consultar los idiomas disponibles. Imagen 12 Idiomas principal y de b\u00fasqueda Los apartados 8 y 9 se dedica a las extensiones instaladas actualmente y el apartado 10 a los plugin y en concreto al minify ya descrito en la secci\u00f3n como trabajar que tiene la utilidad de eliminar espacios en blanco, elimina comentarios, etc.","title":"El archivo mkdocs.yml. Libreria Material"},{"location":"Libreria-Material/#el-archivo-mkdocksyml-libreria-material","text":"Vamos a analizar el archivo mkdocs.yml de la plantilla que estamos utilizando en un momento determinado de elaboraci\u00f3n de esta documentaci\u00f3n y en base a los contenidos que encontramos en la webgraf\u00eda . En la imagen 1 observamos el primer apartado sobre la informaci\u00f3n b\u00e1sica del taller Imagen 1 Apartado 1. Introducci\u00f3n al taller Vamos a relacionar cada punto del apartado 1 con su significado y su reflejo en el navegador. * site_name . Es el nombre del sitio web * site_description . Aqu\u00ed ponemos la descripci\u00f3n de nuestro sitio web y el apartado forma parte de los metadatos que utilizar\u00e1 el script Python que traduce markdown a html y ser\u00e1 usado como un meta atributo. * site_autor . Metadato correspondiente a la autoria del sitio web. * site_url . La direcci\u00f3n url que se asigna al activar gh-pages en la creaci\u00f3n del repositorio. En la imagen 2 vemos algunos de estos puntos reflejados. Imagen 2 Apartado 1 visto en el navegador En la imagen 3 vemos el apartado segundo que en nuestro caso est\u00e1 compuesto por: repo_name . Nombre del repositorio que junto con repo_url conforman el enlace al repositorio. repo_url . Direcci\u00f3n url del repositorio. El nombre del repositorio aparece junto al recuadro de b\u00fasqueda o en la barra de navegaci\u00f3n, dependiendo del tama\u00f1o de la ventana, tal y como se ha representado en la imagen 2. edit_uri . Ruta de acceso desde la base del directorio al repo_url cuando se visualiza directamente una p\u00e1gina. Imagen 3 Apartado 2. Repositorio El apartado 3. Copyright se muestra en el navegador de la forma que vemos en la imagen 4. Imagen 4 Copyright El punto 4 se refiere a los enlaces a redes sociales que se pueden mostrar en el pie de p\u00e1gina usando la fuente FontAwesome . El par\u00e1metro type mostrar\u00e1 el nombre del servicio, y link la URL a enlazar. En la imagen 5 vemos una posible configuraci\u00f3n que es probable que con el servidor local no tenga efecto o no de problemas, en cuyo caso podemos comentar estas l\u00edneas y etiquetar la tarea como TODO: para descomentarla en el momento de hacer el despliegue final. Imagen 5 Enlaces a RRSS El apartado 5 configura el \u00edndice de navegaci\u00f3n que se muestra en el navegador. En la imagen 6 vemos parte del mismo para esta documentaci\u00f3n. Imagen 6 Configuraci\u00f3n del \u00edndice de navegaci\u00f3n En la imagen 7 vemos el aspecto de este \u00edndice en el navegador. Imagen 7 Aspecto del \u00edndice de navegaci\u00f3n en un navegador El apartado 6. Google Analytics permite analizar el uso de nuestro repositorio mediante la integraci\u00f3n de esta herramienta. En nuestro caso no la vamos a utilizar. El apartado 7. Configuraci\u00f3n del tema nos va a permitir adaptar, dentro de las opciones disponibles, el aspecto final de nuestro sitio web. Activamos las modificaciones del tema Material configuran mkdocs.yml como vemos en la imagen 8. Imagen 8 Modificaciones del tema Material En nuestro caso vamos a configurar los aspectos que vemos en la imagen 9 y que explicamos un poco mas a fondo seguidamente. Imagen 9 Configuraciones del tema Material Lo primero que hacemos es configurar los colores que tienen como valores posibles red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey , blue grey y white . Los \u00faltimos cuatro solo pueden usarse como primary . En la imagen 10 vemos destacados los de nuestra configuraci\u00f3n. Imagen 10 Configuraci\u00f3n de colores En este enlace podemos comprobar visualmente el funcionamiento de estos colores. A continuaci\u00f3n tenemos la configuraci\u00f3n de fuentes, que por defecto son Roboto y Roboto Mono . Estas fuentes forman parte de Google Fonts y podemos cambiarlas por otras. Los siguiente que aparece es el logo y el favicom que en mi caso configuro con la misma imagen. El favicon se refiere a un icono de 16x16 px (o 32x32 px) que sirve para identificar un sitio web en las pesta\u00f1as del navegador. El icono debe tener una resoluci\u00f3n m\u00ednima de 128x128 y se aconseja que presente suficiente constraste con el color de fondo. En la imagen 11 vemos estos dos elementos en el navegador. Imagen 11 Temas favicon e icono Seguidamente se configura el idioma como espa\u00f1ol y tambi\u00e9n los idiomas de b\u00fasqueda como espa\u00f1ol e ingl\u00e9s. En la imagen 12 vemos esta configuraci\u00f3n y en el enlace podemos consultar los idiomas disponibles. Imagen 12 Idiomas principal y de b\u00fasqueda Los apartados 8 y 9 se dedica a las extensiones instaladas actualmente y el apartado 10 a los plugin y en concreto al minify ya descrito en la secci\u00f3n como trabajar que tiene la utilidad de eliminar espacios en blanco, elimina comentarios, etc.","title":"El archivo mkdocks.yml. Librer\u00eda Material"},{"location":"Primer-despliegue/","text":"Primer despliegue \u00b6 Vamos a hacer el primer despliegue de nuestro trabajo para ver como queda online, para ello debemos ejecutar pipenv run mkdocs gh-deploy desde la terminal de VSCode con el servidor detenido y esperar a que finalice el trabajo que es cuando se muestra algo similar a lo que vemos en la imagen 1. Imagen 1 Primer despliegue finalizado Si nos dirigimos al repositorio en github y desplegamos la rama gh-pages tendremos un resultado similar al de la imagen 2. Imagen 2 Aspecto del primer despliegue en el repositorio En la imagen 3 vemos el resultado en el navegador Mozilla Firefox. Imagen 3 Primer despliegue visto en el navegador Mozilla Firefox Otra de las grandes ventajas que tiene el sistema de documentaci\u00f3n que estamos viendo es que da formato autom\u00e1ticamente para visualizaci\u00f3n en dispositivos m\u00f3viles, lo que le da muchisima versatilidad al sistema. En la imagen 4 vemos este primer despliegue en la pantalla de un tel\u00e9fono m\u00f3vil. Imagen 4 Primer despliegue visto en m\u00f3vil Lo que nos queda a partir de ahora es aprender lo necesario de Git como para ir actualizando el desarrollo local en la nube.","title":"Primer despliegue"},{"location":"Primer-despliegue/#primer-despliegue","text":"Vamos a hacer el primer despliegue de nuestro trabajo para ver como queda online, para ello debemos ejecutar pipenv run mkdocs gh-deploy desde la terminal de VSCode con el servidor detenido y esperar a que finalice el trabajo que es cuando se muestra algo similar a lo que vemos en la imagen 1. Imagen 1 Primer despliegue finalizado Si nos dirigimos al repositorio en github y desplegamos la rama gh-pages tendremos un resultado similar al de la imagen 2. Imagen 2 Aspecto del primer despliegue en el repositorio En la imagen 3 vemos el resultado en el navegador Mozilla Firefox. Imagen 3 Primer despliegue visto en el navegador Mozilla Firefox Otra de las grandes ventajas que tiene el sistema de documentaci\u00f3n que estamos viendo es que da formato autom\u00e1ticamente para visualizaci\u00f3n en dispositivos m\u00f3viles, lo que le da muchisima versatilidad al sistema. En la imagen 4 vemos este primer despliegue en la pantalla de un tel\u00e9fono m\u00f3vil. Imagen 4 Primer despliegue visto en m\u00f3vil Lo que nos queda a partir de ahora es aprender lo necesario de Git como para ir actualizando el desarrollo local en la nube.","title":"Primer despliegue"},{"location":"Resumen-MkDocs/","text":"Resumen de MkDocs \u00b6 MkDocs es un generador r\u00e1pido de p\u00e1ginas web est\u00e1ticas orientado a la creaci\u00f3n de documentaci\u00f3n de proyectos. Los archivos fuente de documentaci\u00f3n se escriben en Markdown y se configuran con un solo archivo de configuraci\u00f3n YAML , que es un formato de serializaci\u00f3n de datos legible por humanos inspirado en lenguajes como XML , C , Python o Perl . Con MkDocs podemos crear sitios HTML est\u00e1ticos que se pueden alojar en p\u00e1ginas GitHub o en cualquier otro lugar que elijamos. En nuestro caso lo haremos en GitHub. Existen infinidad de temas o plantillas disponibles para MkDocs que podemos elegir de entre los integrados, seleccionar alguno de los que se citan en la wiki MkDocs Themes o crear el nuestro propio. Una de las grandes ventajas que nos ofrece MkDocs es la de obtener una vista previa de nuestro sitio mientras trabajamos. Esto se consigue mediante el servidor de desarrollo incorporado que incluso recargar\u00e1 y actualizar\u00e1 autom\u00e1ticamente nuestro navegador cada vez que guardemos los cambios. MkDocs es f\u00e1cil de personalizar por lo que permite obtener la documentaci\u00f3n de nuestro proyecto tal como lo deseamos personalizando el tema y/o instalando algunos complementos. En el enlace correspondiente de la webgraf\u00eda tenemos toda la informaci\u00f3n necesaria para realizar pruebas con MkDocs .","title":"Resumen de MkDocs"},{"location":"Resumen-MkDocs/#resumen-de-mkdocs","text":"MkDocs es un generador r\u00e1pido de p\u00e1ginas web est\u00e1ticas orientado a la creaci\u00f3n de documentaci\u00f3n de proyectos. Los archivos fuente de documentaci\u00f3n se escriben en Markdown y se configuran con un solo archivo de configuraci\u00f3n YAML , que es un formato de serializaci\u00f3n de datos legible por humanos inspirado en lenguajes como XML , C , Python o Perl . Con MkDocs podemos crear sitios HTML est\u00e1ticos que se pueden alojar en p\u00e1ginas GitHub o en cualquier otro lugar que elijamos. En nuestro caso lo haremos en GitHub. Existen infinidad de temas o plantillas disponibles para MkDocs que podemos elegir de entre los integrados, seleccionar alguno de los que se citan en la wiki MkDocs Themes o crear el nuestro propio. Una de las grandes ventajas que nos ofrece MkDocs es la de obtener una vista previa de nuestro sitio mientras trabajamos. Esto se consigue mediante el servidor de desarrollo incorporado que incluso recargar\u00e1 y actualizar\u00e1 autom\u00e1ticamente nuestro navegador cada vez que guardemos los cambios. MkDocs es f\u00e1cil de personalizar por lo que permite obtener la documentaci\u00f3n de nuestro proyecto tal como lo deseamos personalizando el tema y/o instalando algunos complementos. En el enlace correspondiente de la webgraf\u00eda tenemos toda la informaci\u00f3n necesaria para realizar pruebas con MkDocs .","title":"Resumen de MkDocs"},{"location":"about/","text":"Autor y licencias \u00b6 Autor \u00b6 Federico Coca Breve biografia \u00b6 Ingeniero Electr\u00f3nico de formaci\u00f3n y friki de profesi\u00f3n he dedicado mi vida laboral a la docencia en Formaci\u00f3n Profesional. Desde siempre he tenido esp\u00edritu maker lo que me ha llevado de una forma u otra a intentar estar siempre aprendiendo e innovando. A t\u00edtulo de ejemplo dir\u00e9 que fui el creador de la primera impresora 3D libre que se document\u00f3 en Granada bajo el paraguas de ClonWars con una Prusa i2, concretamente se trata del Clon n\u00famero 125: GrBot-3D, descendiente de Plumabot-Gr (Finalizado:19 de enero de 2013). Granabot \u00b6 Desde el a\u00f1o 2012 y bajo el paraguas del I.E.S. Virgen de las Nieves he sido el coordinador de la organizaci\u00f3n de GranaBot, una feria-concurso de micro rob\u00f3tica organizado por profesores que imparten el CFGS de Mantenimiento Electr\u00f3nico en el IES Virgen de las Nieves. GranaBot pretende ser un lugar de encuentro donde alumnos de cualquier nivel educativo y aficionados puedan no s\u00f3lo competir con sus prototipos sino tambi\u00e9n compartir sus conocimientos. Los principales objetivos son: Celebrar los concursos OPEN que ya vienen siendo tradicionales Organizar conferencias relacionadas con temas tecnol\u00f3gicos de actualidad. Ampliar los citados concursos a las etapas de educaci\u00f3n primaria y secundaria obligatoria. Promocionar las nuevas tecnolog\u00edas, entre j\u00f3venes estudiantes, en una actividad eminentemente pr\u00e1ctica. Potenciar la relaci\u00f3n entre diferentes instituciones. Potenciar la relaci\u00f3n Centro \u2013 Empresa. Fomentar aptitudes y actitudes de disciplina, liderazgo y trabajo en equipo. Fomentar el uso de las nuevas tecnolog\u00edas. Fomentar el aprendizaje de Ciencia, Tecnolog\u00eda, Ingenier\u00eda, Arte y Matem\u00e1ticas (STEAM) Se celebra en una modalidad OPEN, por lo que podr\u00e1 participar cualquier aficionado o aficionada a la rob\u00f3tica. Club Rob\u00f3tica Granada \u00b6 Actualmente presido el Club Rob\u00f3tica Granada , una Organizaci\u00f3n de ayuda a la difusi\u00f3n y democratizaci\u00f3n de la tecnolog\u00eda, la programaci\u00f3n y la rob\u00f3tica en la sociedad, constituida por personas entusiastas de la Tecnolog\u00eda y la Ciencia. El Club es una asociaci\u00f3n sin \u00e1nimo de lucro desde la que compartimos conocimientos y recursos a trav\u00e9s de repositorios. El club surgi\u00f3 en el a\u00f1o 2016 quedando constituidos como asociaci\u00f3n el d\u00eda 28 de mayo de 2019. Robolot y Faber Residence \u00b6 Desde el a\u00f1o 2012 vengo asistiendo al evento Robolot que se celebra en la preciosa ciudad de Olot en la comarca de la Garrotxa en Girona. Habitualmente colaboro en la organizaci\u00f3n y suelo actuar como juez en la prueba de minisumo. La Residencia Faber (del lat\u00edn faber , artesano, obrero, forjador ... ') es una residencia de artes, ciencias y humanidades ubicada en la ciudad de Olot (la Garrotxa) inaugurada en septiembre de 2016. Mi primera invitaci\u00f3n a una Residencia tem\u00e1tica fue el a\u00f1o 2018 en el que asist\u00ed como residetente del 7 al 23 de mayo a Rob\u00f3tica . Del 3 al 13 de mayo de 2019 asisto a la residencia Rob\u00f3tica II . EducaCont es una idea nacida en FaberResidency durante el ROBOLOT 2018 para hacer pedagog\u00eda de un aire limpio. Iniciamos este proyecto las siguientes personas: Miguel Antonio Pe\u00f1a (Doctor en Ciencias Qu\u00edmicas por la Universidad Complutense de Madrid. Investigador Cient\u00edfico del Instituto de Cat\u00e1lisis y Petroleoqu\u00edmica del CSIC desde 1993. Actualmente, es Secretario de la Asociaci\u00f3n Espa\u00f1ola del Hidr\u00f3geno, presidente del Comit\u00e9 T\u00e9cnico de Normalizaci\u00f3n de Tecnolog\u00edas del Hidr\u00f3geno de UNE, miembro de diferentes comit\u00e9s asesores de agencias gubernamentales, y organizador de varios congresos internacionales.) Federico Coca (desarrollo del hardware, el software y gran parte de la documentaci\u00f3n as\u00ed como colaborador en el desarrollo del sitio web) Ana Albalat (Sub-directora general de Recerca i Cultura Digital del Departament d'Educaci\u00f3 de la Generalitat de Catalunya) Eva Mateo (profesora en Departament d'Ensenyament - Generalitat de Catalunya) Juan Jos\u00e9 L\u00f3pez (desarrollador de la plataforma Arduinoblocks ) Toni Moreno (trabaja en el \u00e1rea de Innovaci\u00f3 Educativa del Depart. Educaci\u00f3 de la Generalitat de Catalunya y es presidente de la Asociaci\u00f3n ROBOLOTEAM, cuyo objetivo es coordinar las m\u00faltiples colaboraciones e iniciativas de ROBOLOT y organizar el concurso anual.) Jos\u00e9 Andr\u00e9s Echevarr\u00eda (profesor de tecnolog\u00eda cantabro y organizador de CantabRobots ) Incorporaciones importantes al proyecto son: Pedro David Domingo (Graduado en Ingenier\u00eda El\u00e9ctrica con M\u00e1ster en Ingenier\u00eda Electr\u00f3nica y Autom\u00e1tica. Adem\u00e1s es T\u00e9cnico en Mantenimiento Industrial. Actualmente es profesor de Sistemas El\u00e9ctricos y de Instalaciones Dom\u00f3ticas y Autom\u00e1ticas en Formaci\u00f3n Profesional en el centro educativo Salesianos San Jos\u00e9 en Salamanca. Dirige la plataforma educativa Didactr\u00f3nica ) Cati Quintana (Licenciada en Biolog\u00eda por la Universidad de Barcelona. Desde 1991 es profesora de Ciencias Experimentales en Secundaria. Actualmente combina la docencia en el INS La Garrotxa de Olot con el programa STEAMCat, de fomento de la vocaci\u00f3n cient\u00edfico-tecnol\u00f3gica y matem\u00e1ticas, del Departament d'Educaci\u00f3 de la Generalitat de Catalunya. Miembro de ROBOLOTEAM y del GAC (Grupo Altas Capacidades del ICE UB) desde el cual coordina la organizaci\u00f3n del Congreso de J\u00f3venes Cient\u00edficos (para Secundaria) en Olot.) Merc\u00e8 Requena (Maestra de Educaci\u00f3n Infantil y Primaria. Coordinadora TIC en la Escuela Domeny de Girona (hasta el curso 2019). Miembro del equipo ICE TAC Primaria de la UdG del 2016 a 2018. Formadora del profesorado en el uso de herramientas colaborativas y gesti\u00f3n de la documentaci\u00f3n en la nube. Actualmente disfruta de una licencia para trabajar en el Programa STEAMCat, y en el Servei d'Innovaci\u00f3, Xarxes i Serveis Educatius del Departament d'Educaci\u00f3 de la Generalitat de Catalunya. Principal desarrolladora del sitio web Educacont . Del 6 de mayo al 27 de junio de 2020 participo en la residencia Rob\u00f3tica III que se celebra de forma telem\u00e1tica.","title":"Autor"},{"location":"about/#autor-y-licencias","text":"","title":"Autor y licencias"},{"location":"about/#autor","text":"Federico Coca","title":"Autor"},{"location":"about/#breve-biografia","text":"Ingeniero Electr\u00f3nico de formaci\u00f3n y friki de profesi\u00f3n he dedicado mi vida laboral a la docencia en Formaci\u00f3n Profesional. Desde siempre he tenido esp\u00edritu maker lo que me ha llevado de una forma u otra a intentar estar siempre aprendiendo e innovando. A t\u00edtulo de ejemplo dir\u00e9 que fui el creador de la primera impresora 3D libre que se document\u00f3 en Granada bajo el paraguas de ClonWars con una Prusa i2, concretamente se trata del Clon n\u00famero 125: GrBot-3D, descendiente de Plumabot-Gr (Finalizado:19 de enero de 2013).","title":"Breve biografia"},{"location":"about/#granabot","text":"Desde el a\u00f1o 2012 y bajo el paraguas del I.E.S. Virgen de las Nieves he sido el coordinador de la organizaci\u00f3n de GranaBot, una feria-concurso de micro rob\u00f3tica organizado por profesores que imparten el CFGS de Mantenimiento Electr\u00f3nico en el IES Virgen de las Nieves. GranaBot pretende ser un lugar de encuentro donde alumnos de cualquier nivel educativo y aficionados puedan no s\u00f3lo competir con sus prototipos sino tambi\u00e9n compartir sus conocimientos. Los principales objetivos son: Celebrar los concursos OPEN que ya vienen siendo tradicionales Organizar conferencias relacionadas con temas tecnol\u00f3gicos de actualidad. Ampliar los citados concursos a las etapas de educaci\u00f3n primaria y secundaria obligatoria. Promocionar las nuevas tecnolog\u00edas, entre j\u00f3venes estudiantes, en una actividad eminentemente pr\u00e1ctica. Potenciar la relaci\u00f3n entre diferentes instituciones. Potenciar la relaci\u00f3n Centro \u2013 Empresa. Fomentar aptitudes y actitudes de disciplina, liderazgo y trabajo en equipo. Fomentar el uso de las nuevas tecnolog\u00edas. Fomentar el aprendizaje de Ciencia, Tecnolog\u00eda, Ingenier\u00eda, Arte y Matem\u00e1ticas (STEAM) Se celebra en una modalidad OPEN, por lo que podr\u00e1 participar cualquier aficionado o aficionada a la rob\u00f3tica.","title":"Granabot"},{"location":"about/#club-robotica-granada","text":"Actualmente presido el Club Rob\u00f3tica Granada , una Organizaci\u00f3n de ayuda a la difusi\u00f3n y democratizaci\u00f3n de la tecnolog\u00eda, la programaci\u00f3n y la rob\u00f3tica en la sociedad, constituida por personas entusiastas de la Tecnolog\u00eda y la Ciencia. El Club es una asociaci\u00f3n sin \u00e1nimo de lucro desde la que compartimos conocimientos y recursos a trav\u00e9s de repositorios. El club surgi\u00f3 en el a\u00f1o 2016 quedando constituidos como asociaci\u00f3n el d\u00eda 28 de mayo de 2019.","title":"Club Rob\u00f3tica Granada"},{"location":"about/#robolot-y-faber-residence","text":"Desde el a\u00f1o 2012 vengo asistiendo al evento Robolot que se celebra en la preciosa ciudad de Olot en la comarca de la Garrotxa en Girona. Habitualmente colaboro en la organizaci\u00f3n y suelo actuar como juez en la prueba de minisumo. La Residencia Faber (del lat\u00edn faber , artesano, obrero, forjador ... ') es una residencia de artes, ciencias y humanidades ubicada en la ciudad de Olot (la Garrotxa) inaugurada en septiembre de 2016. Mi primera invitaci\u00f3n a una Residencia tem\u00e1tica fue el a\u00f1o 2018 en el que asist\u00ed como residetente del 7 al 23 de mayo a Rob\u00f3tica . Del 3 al 13 de mayo de 2019 asisto a la residencia Rob\u00f3tica II . EducaCont es una idea nacida en FaberResidency durante el ROBOLOT 2018 para hacer pedagog\u00eda de un aire limpio. Iniciamos este proyecto las siguientes personas: Miguel Antonio Pe\u00f1a (Doctor en Ciencias Qu\u00edmicas por la Universidad Complutense de Madrid. Investigador Cient\u00edfico del Instituto de Cat\u00e1lisis y Petroleoqu\u00edmica del CSIC desde 1993. Actualmente, es Secretario de la Asociaci\u00f3n Espa\u00f1ola del Hidr\u00f3geno, presidente del Comit\u00e9 T\u00e9cnico de Normalizaci\u00f3n de Tecnolog\u00edas del Hidr\u00f3geno de UNE, miembro de diferentes comit\u00e9s asesores de agencias gubernamentales, y organizador de varios congresos internacionales.) Federico Coca (desarrollo del hardware, el software y gran parte de la documentaci\u00f3n as\u00ed como colaborador en el desarrollo del sitio web) Ana Albalat (Sub-directora general de Recerca i Cultura Digital del Departament d'Educaci\u00f3 de la Generalitat de Catalunya) Eva Mateo (profesora en Departament d'Ensenyament - Generalitat de Catalunya) Juan Jos\u00e9 L\u00f3pez (desarrollador de la plataforma Arduinoblocks ) Toni Moreno (trabaja en el \u00e1rea de Innovaci\u00f3 Educativa del Depart. Educaci\u00f3 de la Generalitat de Catalunya y es presidente de la Asociaci\u00f3n ROBOLOTEAM, cuyo objetivo es coordinar las m\u00faltiples colaboraciones e iniciativas de ROBOLOT y organizar el concurso anual.) Jos\u00e9 Andr\u00e9s Echevarr\u00eda (profesor de tecnolog\u00eda cantabro y organizador de CantabRobots ) Incorporaciones importantes al proyecto son: Pedro David Domingo (Graduado en Ingenier\u00eda El\u00e9ctrica con M\u00e1ster en Ingenier\u00eda Electr\u00f3nica y Autom\u00e1tica. Adem\u00e1s es T\u00e9cnico en Mantenimiento Industrial. Actualmente es profesor de Sistemas El\u00e9ctricos y de Instalaciones Dom\u00f3ticas y Autom\u00e1ticas en Formaci\u00f3n Profesional en el centro educativo Salesianos San Jos\u00e9 en Salamanca. Dirige la plataforma educativa Didactr\u00f3nica ) Cati Quintana (Licenciada en Biolog\u00eda por la Universidad de Barcelona. Desde 1991 es profesora de Ciencias Experimentales en Secundaria. Actualmente combina la docencia en el INS La Garrotxa de Olot con el programa STEAMCat, de fomento de la vocaci\u00f3n cient\u00edfico-tecnol\u00f3gica y matem\u00e1ticas, del Departament d'Educaci\u00f3 de la Generalitat de Catalunya. Miembro de ROBOLOTEAM y del GAC (Grupo Altas Capacidades del ICE UB) desde el cual coordina la organizaci\u00f3n del Congreso de J\u00f3venes Cient\u00edficos (para Secundaria) en Olot.) Merc\u00e8 Requena (Maestra de Educaci\u00f3n Infantil y Primaria. Coordinadora TIC en la Escuela Domeny de Girona (hasta el curso 2019). Miembro del equipo ICE TAC Primaria de la UdG del 2016 a 2018. Formadora del profesorado en el uso de herramientas colaborativas y gesti\u00f3n de la documentaci\u00f3n en la nube. Actualmente disfruta de una licencia para trabajar en el Programa STEAMCat, y en el Servei d'Innovaci\u00f3, Xarxes i Serveis Educatius del Departament d'Educaci\u00f3 de la Generalitat de Catalunya. Principal desarrolladora del sitio web Educacont . Del 6 de mayo al 27 de junio de 2020 participo en la residencia Rob\u00f3tica III que se celebra de forma telem\u00e1tica.","title":"Robolot y Faber Residence"},{"location":"markdown/","text":"Ayuda para escribir en Markdown \u00b6 Simplemente reproduzco aqu\u00ed la chuleta que viene con la plantilla a la que a\u00f1ado alguna peque\u00f1a cosa que me resulta interesante. Esta es solo una chuleta de Markdown b\u00e1sico. En esta web tienes una referencia muy buena -> Web de Markdown . Para escribir Markdown se recomienda usar como editor VSCode o VSCodium con las extensiones: Markdown All in One Markdownlint T\u00edtulos \u00b6 Textos \u00b6 Texto en negrita o esto tsmbi\u00e9n es negrita . Texto en cursiva o esto tambi\u00e9n es cursiva . Texto en negrita y cursiva Para poner un salto de linea tienes que poner dos espacios en blanco despu\u00e9s del punto. Esta l\u00ednea est\u00e1 debajo. Pero esta sale seguido. O debes de poner una l\u00ednea vac\u00eda entre medias. Enlaces \u00b6 As\u00ed se pone un enlace a una p\u00e1gina de Internet . As\u00ed se pone un enlace a una p\u00e1gina del propio taller . Im\u00e1genes \u00b6 As\u00ed se pone una imagen desde Internet Y as\u00ed se pone una imagen desde el propio taller Listas \u00b6 Listas sin orden con * , ejemplo: Esto es una lista Lista sin orden. Listas ordenadas con 1. , ejemplo: Esto es una Lista ordenada Citas \u00b6 Si quieres poner una cita tienes que usar > delante del texto, ejemplo: Esto es una cita Esto es una cita anidada Esto es una cita doblemente anidada Regla horizontal \u00b6 Se hace para poner una l\u00ednea que divisa visualmente una secci\u00f3n de otra. Aqu\u00ed hay una. Tablas \u00b6 En este ejemplo tienes una tabla con 3 columnas: La primera tiene el texto fijado a la izquierda. La segunda tiene el texto fijado al centro. La tercera tiene el texto fijado a la derecha. Texto a la izquierda Texto en el centro Texto en la derecha En un lugar de la mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, roc\u00edn flaco y galgo corredor... L\u00edneas de c\u00f3digo \u00b6 Para poner c\u00f3digo en l\u00ednea, tienes que ponerlo entre las comillas `. Aqu\u00ed tienes un ejemplo de c\u00f3digo en l\u00ednea. Si quisieras poner un bloque de c\u00f3digo tienes que poner 3 comillas `, debajo el c\u00f3digo, y una \u00faltima l\u00ednea con otras 3 comillas. Puedes incluso espec\u00edficarle el lenguaje del c\u00f3digo para que te lo coloree. Ah\u00ed va un ejemplo en Python: import antigravity print ( 'Hola mundo' )","title":"Ayuda para escribir en Markdown"},{"location":"markdown/#ayuda-para-escribir-en-markdown","text":"Simplemente reproduzco aqu\u00ed la chuleta que viene con la plantilla a la que a\u00f1ado alguna peque\u00f1a cosa que me resulta interesante. Esta es solo una chuleta de Markdown b\u00e1sico. En esta web tienes una referencia muy buena -> Web de Markdown . Para escribir Markdown se recomienda usar como editor VSCode o VSCodium con las extensiones: Markdown All in One Markdownlint","title":"Ayuda para escribir en Markdown"},{"location":"markdown/#titulos","text":"","title":"T\u00edtulos"},{"location":"markdown/#textos","text":"Texto en negrita o esto tsmbi\u00e9n es negrita . Texto en cursiva o esto tambi\u00e9n es cursiva . Texto en negrita y cursiva Para poner un salto de linea tienes que poner dos espacios en blanco despu\u00e9s del punto. Esta l\u00ednea est\u00e1 debajo. Pero esta sale seguido. O debes de poner una l\u00ednea vac\u00eda entre medias.","title":"Textos"},{"location":"markdown/#enlaces","text":"As\u00ed se pone un enlace a una p\u00e1gina de Internet . As\u00ed se pone un enlace a una p\u00e1gina del propio taller .","title":"Enlaces"},{"location":"markdown/#imagenes","text":"As\u00ed se pone una imagen desde Internet Y as\u00ed se pone una imagen desde el propio taller","title":"Im\u00e1genes"},{"location":"markdown/#listas","text":"Listas sin orden con * , ejemplo: Esto es una lista Lista sin orden. Listas ordenadas con 1. , ejemplo: Esto es una Lista ordenada","title":"Listas"},{"location":"markdown/#citas","text":"Si quieres poner una cita tienes que usar > delante del texto, ejemplo: Esto es una cita Esto es una cita anidada Esto es una cita doblemente anidada","title":"Citas"},{"location":"markdown/#regla-horizontal","text":"Se hace para poner una l\u00ednea que divisa visualmente una secci\u00f3n de otra. Aqu\u00ed hay una.","title":"Regla horizontal"},{"location":"markdown/#tablas","text":"En este ejemplo tienes una tabla con 3 columnas: La primera tiene el texto fijado a la izquierda. La segunda tiene el texto fijado al centro. La tercera tiene el texto fijado a la derecha. Texto a la izquierda Texto en el centro Texto en la derecha En un lugar de la mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, roc\u00edn flaco y galgo corredor...","title":"Tablas"},{"location":"markdown/#lineas-de-codigo","text":"Para poner c\u00f3digo en l\u00ednea, tienes que ponerlo entre las comillas `. Aqu\u00ed tienes un ejemplo de c\u00f3digo en l\u00ednea. Si quisieras poner un bloque de c\u00f3digo tienes que poner 3 comillas `, debajo el c\u00f3digo, y una \u00faltima l\u00ednea con otras 3 comillas. Puedes incluso espec\u00edficarle el lenguaje del c\u00f3digo para que te lo coloree. Ah\u00ed va un ejemplo en Python: import antigravity print ( 'Hola mundo' )","title":"L\u00edneas de c\u00f3digo"},{"location":"plantilla/","text":"Instalaci\u00f3n de la plantilla \u00b6 La plantilla est\u00e1 pensada para ser usada en un repositorio, aunque se puede usar de manera local. Seguimos el siguiente proceso: Creamos un repositorio en Github tal y como observamos en la imagen 1. A\u00f1adimos la licencia MIT. Imagen 1 Datos para crear un nuevo repositorio en Github Tras unos instantes se mostrar\u00e1 el resultado que vemos en la imagen 2. Imagen 2 Repositorio reci\u00e9n creado con licencia MIT A ese repositorio le creamos una rama que se llame gh-pages (GitHub-p\u00e1ginas). Para ello procedemos de la siguiente forma: Vamos a la p\u00e1gina principal del repositorio y desplegamos el men\u00fa selector de ramas, que en un repositorio reci\u00e9n creado tiene el aspecto de la imagen 3. Imagen 3 Selector de ramas El aspecto al desplegar el men\u00fa es el de la imagen 4. Imagen 4 Men\u00fa selector de ramas al desplegarlo Procedemos como vemos en la imagen 5. Imagen 5 Creaci\u00f3n de una nueva rama Una vez terminada la tarea el aspecto de nuestro repositorio (imagen 6) muestra que tiene dos ramas, la master y la reci\u00e9n creada. Imagen 6 Repo con dos ramas Con esto hemos creado una rama de c\u00f3digo especial llamada gh-pages o p\u00e1ginas GitHub. Esta rama es un servicio de alojamiento de sitio est\u00e1tico que toma archivos HTML, CSS y JavaScript directamente desde un repositorio en GitHub, y a trav\u00e9s de un proceso de compilaci\u00f3n publica un sitio web. La URL toma la forma usuario.github.io/mi-repositorio . Si necesitamos borrar una rama previamente creada hacemos clic en el n\u00famero de ramas (branches) y se nos abrir\u00e1 una nueva ventana (imagen 7) con todas las ramas, basta con localizar la que queremos eliminar y hacer clic sobre la papelera. Imagen 7 Eliminar una rama en un repositorio En la secci\u00f3n Settings del repositorio, localizamos la parte de Github Pages y habilitamos la opci\u00f3n de usar la rama gh-pages creada tal y como vemos en la imagen 8 haciendo clic en gh-pages branch . Imagen 8 Habilitar rama para su uso La URL que vemos es la direcci\u00f3n web del sitio y ser\u00e1 la que enlaza con el archivo index.html correspondiente. En la situaci\u00f3n que tenemos actualmente si hacemos clic en el enlace se nos generar\u00e1 un error como el que vemos en la imagen 9, donde indica justamente que el archivo no existe. Imagen 9 Error por no existir a\u00fan index.html Descargamos / clonamos el repositorio en el pc. Durante todo el tiempo vamos a trabajar en la rama master. Al desplegar tendremos algo similar a la imagen 10. Imagen 10 Opciones de descarga Observamos que disponemos de varias opciones de descarga / clonado. La que debemos usar, que es la recomendada, es la que se ve en la imagen 10 donde podemos leer que para clonar via HTTPS debemos \u201cUse Git or checkout with SVN using the web URL\u201d que traducido viene a indicar que usemos la URL indicada con git o que lo hagamos con SVN (Subversion) que es una herramienta de control de versiones open source basada en un repositorio cuyo funcionamiento se asemeja enormemente al de un sistema de ficheros. Se hace necesario utilizar algunos conceptos b\u00e1sicos de git que explicamos a continuaci\u00f3n. Desde una terminal tecleamos: $ git \u2013version . Si a\u00fan no lo tenemos instalado nos pedir\u00e1 que lo instalemos, lo que podemos hacer as\u00ed: $ sudo apt-get install git . Debe devolver algo como: git version 2.26.2 . La primera tarea que se debe hacer al instalar Git es configurar nuestro nombre de usuario y direcci\u00f3n de correo electr\u00f3nico. Esto es importante porque cada commit o remisi\u00f3n de informaci\u00f3n de Git usar\u00e1 esta informaci\u00f3n. Para hacerlo teclemos las dos l\u00edneas siguientes en una terminal: $ git config --global user.name \"@fgcoca\" $ git config --global user.email a@a.com Si hacemos una descarga zip debemos descomprimir el archivo, copiarlo en el directorio de trabajo deseado, dirigirnos a ese directorio y convertirlo en un directorio git, o sea tecleamos en una terminal lo siguiente: $ cd /home/user/mi_directorio $ git init De esta forma se crea un nuevo subdirectorio llamado .git que contiene todos los archivos de repositorio necesarios, aunque todav\u00eda no se realiza el seguimiento de nada en este proyecto. En nuestro caso, y es lo recomendado para usar la plantilla, vamos a clonar el repositorio creado y para ello nos situamos en el directorio que vamos a usar, Documentos en este caso, y tecleamos: ~/Documentos$ git clone https://github.com/fgcoca/FreeCAD-0.18.git Tras unos instantes obtendremos el resultado que vemos en la imagen 11. Imagen 11 Resultado de la clonaci\u00f3n realizada con git Si vamos al directorio creado (Tutoriales-FreeCAD-0.18) podemos ver su contenido tal y como aparece en la imagen 12. Vemos que aparece la creaci\u00f3n del directorio como git y que se ha descargado la licencia que es el \u00fanico contenido que ahora mismo tiene. Imagen 12 Contenido del directorio clonado con git Descargamos / clonamos la plantilla, plantilla-taller , en el ordenador y hacemos copia en nuestra carpeta de los elementos que se detallan y que vemos destacados en la imagen 13. Carpeta docs. Fichero mkdocs.yml. Fichero Pipfile (el Pipfile.lock no lo copiamos). Este fichero se crear\u00e1 m\u00e1s adelante de forma autom\u00e1tica. Fichero .gitignore (si no est\u00e1 visible activamos los ficheros ocultos). Fichero LICENSE (si no queremos que tener licencia MIT, cambiamos su contenido, pero siempre ponemos una licencia libre a nuestro trabajo. En realidad en nuestro caso este fichero no debemos copiarlo dado que ya hemos creado el nuestro propio. Imagen 13 Elementos de la plantilla a copiar en nuestro directorio Mas adelante veremos como a\u00f1adir otras licencias. Nos situamos en la carpeta con la que vamos a trabajar y abrimos una terminal de comandos. Tecleamos pipenv install para crear el entorno virtual e instalar todas sus dependencias, tal y como vemos en la imagen 14. Imagen 14 Creaci\u00f3n del flujo de trabajo con pipenv Con esto ya tenemos casi todo lo necesario para trabajar localmente.","title":"Instalaci\u00f3n de la plantilla"},{"location":"plantilla/#instalacion-de-la-plantilla","text":"La plantilla est\u00e1 pensada para ser usada en un repositorio, aunque se puede usar de manera local. Seguimos el siguiente proceso: Creamos un repositorio en Github tal y como observamos en la imagen 1. A\u00f1adimos la licencia MIT. Imagen 1 Datos para crear un nuevo repositorio en Github Tras unos instantes se mostrar\u00e1 el resultado que vemos en la imagen 2. Imagen 2 Repositorio reci\u00e9n creado con licencia MIT A ese repositorio le creamos una rama que se llame gh-pages (GitHub-p\u00e1ginas). Para ello procedemos de la siguiente forma: Vamos a la p\u00e1gina principal del repositorio y desplegamos el men\u00fa selector de ramas, que en un repositorio reci\u00e9n creado tiene el aspecto de la imagen 3. Imagen 3 Selector de ramas El aspecto al desplegar el men\u00fa es el de la imagen 4. Imagen 4 Men\u00fa selector de ramas al desplegarlo Procedemos como vemos en la imagen 5. Imagen 5 Creaci\u00f3n de una nueva rama Una vez terminada la tarea el aspecto de nuestro repositorio (imagen 6) muestra que tiene dos ramas, la master y la reci\u00e9n creada. Imagen 6 Repo con dos ramas Con esto hemos creado una rama de c\u00f3digo especial llamada gh-pages o p\u00e1ginas GitHub. Esta rama es un servicio de alojamiento de sitio est\u00e1tico que toma archivos HTML, CSS y JavaScript directamente desde un repositorio en GitHub, y a trav\u00e9s de un proceso de compilaci\u00f3n publica un sitio web. La URL toma la forma usuario.github.io/mi-repositorio . Si necesitamos borrar una rama previamente creada hacemos clic en el n\u00famero de ramas (branches) y se nos abrir\u00e1 una nueva ventana (imagen 7) con todas las ramas, basta con localizar la que queremos eliminar y hacer clic sobre la papelera. Imagen 7 Eliminar una rama en un repositorio En la secci\u00f3n Settings del repositorio, localizamos la parte de Github Pages y habilitamos la opci\u00f3n de usar la rama gh-pages creada tal y como vemos en la imagen 8 haciendo clic en gh-pages branch . Imagen 8 Habilitar rama para su uso La URL que vemos es la direcci\u00f3n web del sitio y ser\u00e1 la que enlaza con el archivo index.html correspondiente. En la situaci\u00f3n que tenemos actualmente si hacemos clic en el enlace se nos generar\u00e1 un error como el que vemos en la imagen 9, donde indica justamente que el archivo no existe. Imagen 9 Error por no existir a\u00fan index.html Descargamos / clonamos el repositorio en el pc. Durante todo el tiempo vamos a trabajar en la rama master. Al desplegar tendremos algo similar a la imagen 10. Imagen 10 Opciones de descarga Observamos que disponemos de varias opciones de descarga / clonado. La que debemos usar, que es la recomendada, es la que se ve en la imagen 10 donde podemos leer que para clonar via HTTPS debemos \u201cUse Git or checkout with SVN using the web URL\u201d que traducido viene a indicar que usemos la URL indicada con git o que lo hagamos con SVN (Subversion) que es una herramienta de control de versiones open source basada en un repositorio cuyo funcionamiento se asemeja enormemente al de un sistema de ficheros. Se hace necesario utilizar algunos conceptos b\u00e1sicos de git que explicamos a continuaci\u00f3n. Desde una terminal tecleamos: $ git \u2013version . Si a\u00fan no lo tenemos instalado nos pedir\u00e1 que lo instalemos, lo que podemos hacer as\u00ed: $ sudo apt-get install git . Debe devolver algo como: git version 2.26.2 . La primera tarea que se debe hacer al instalar Git es configurar nuestro nombre de usuario y direcci\u00f3n de correo electr\u00f3nico. Esto es importante porque cada commit o remisi\u00f3n de informaci\u00f3n de Git usar\u00e1 esta informaci\u00f3n. Para hacerlo teclemos las dos l\u00edneas siguientes en una terminal: $ git config --global user.name \"@fgcoca\" $ git config --global user.email a@a.com Si hacemos una descarga zip debemos descomprimir el archivo, copiarlo en el directorio de trabajo deseado, dirigirnos a ese directorio y convertirlo en un directorio git, o sea tecleamos en una terminal lo siguiente: $ cd /home/user/mi_directorio $ git init De esta forma se crea un nuevo subdirectorio llamado .git que contiene todos los archivos de repositorio necesarios, aunque todav\u00eda no se realiza el seguimiento de nada en este proyecto. En nuestro caso, y es lo recomendado para usar la plantilla, vamos a clonar el repositorio creado y para ello nos situamos en el directorio que vamos a usar, Documentos en este caso, y tecleamos: ~/Documentos$ git clone https://github.com/fgcoca/FreeCAD-0.18.git Tras unos instantes obtendremos el resultado que vemos en la imagen 11. Imagen 11 Resultado de la clonaci\u00f3n realizada con git Si vamos al directorio creado (Tutoriales-FreeCAD-0.18) podemos ver su contenido tal y como aparece en la imagen 12. Vemos que aparece la creaci\u00f3n del directorio como git y que se ha descargado la licencia que es el \u00fanico contenido que ahora mismo tiene. Imagen 12 Contenido del directorio clonado con git Descargamos / clonamos la plantilla, plantilla-taller , en el ordenador y hacemos copia en nuestra carpeta de los elementos que se detallan y que vemos destacados en la imagen 13. Carpeta docs. Fichero mkdocs.yml. Fichero Pipfile (el Pipfile.lock no lo copiamos). Este fichero se crear\u00e1 m\u00e1s adelante de forma autom\u00e1tica. Fichero .gitignore (si no est\u00e1 visible activamos los ficheros ocultos). Fichero LICENSE (si no queremos que tener licencia MIT, cambiamos su contenido, pero siempre ponemos una licencia libre a nuestro trabajo. En realidad en nuestro caso este fichero no debemos copiarlo dado que ya hemos creado el nuestro propio. Imagen 13 Elementos de la plantilla a copiar en nuestro directorio Mas adelante veremos como a\u00f1adir otras licencias. Nos situamos en la carpeta con la que vamos a trabajar y abrimos una terminal de comandos. Tecleamos pipenv install para crear el entorno virtual e instalar todas sus dependencias, tal y como vemos en la imagen 14. Imagen 14 Creaci\u00f3n del flujo de trabajo con pipenv Con esto ya tenemos casi todo lo necesario para trabajar localmente.","title":"Instalaci\u00f3n de la plantilla"},{"location":"trabajo/","text":"Como trabajar \u00b6 Para poder ver el avance de nuestro trabajo tal y como se ver\u00e1 en Internet, tenemos que poner en marcha un servidor de pruebas local. Esto es tan sencillo como teclear en la terminal anterior (si la hemos cerrado volvemos a abrirla estando en la carpeta de trabajo) lo siguiente: $ pipenv run mkdocs serve Esto monta un servidor con su propio Python para dejar el del sistema sin manipular. Este servidor se debe mantener abierto desde una terminal de comandos mientras estemos trabajando. Si queremos echarlo abajo basta con pulsar la secuencia Ctrl+C. Es posible que al intentar montar el servidor nos genere alg\u00fan tipo de error, como el que vemos en la imagen 1. Imagen 1 Error por m\u00f3dulo faltante Para subsanar el error basta con instalar las extensiones de Python para Markdown tal y como vemos en la imagen 2. Imagen 2 Instalaci\u00f3n de m\u00f3dulo faltante Otro posible error que se nos puede producir y como solucionarlo lo vemos en la imagen 3. Se trata de un plugin minificador que elimina espacios en blanco, comentarios, combina archivos y optimiza / acorta algunos patrones de programaci\u00f3n comunes. Imagen 3 Instalaci\u00f3n del plugin minify El mismo resultado lo obtenemos si en la terminal tecleamos lo siguiente: $ pip install mkdocs-minify-plugin Si nos genera alg\u00fan tipo de error relacionado con la librer\u00eda Material podemos instalarla de la forma que vemos en la imagen 4. Imagen 4 Instalaci\u00f3n de la libreria Material Atajos para facilitar el trabajo \u00b6 Ya hemos visto que para lanzar el servidor local tenemos que teclear pipenv run mkdocs serve . Podemos poner algo mas sencillo y facil de recordar para nosotros y que el comando pipenv run act\u00fae de la misma forma, para ello vamos a abrir el archivo Pipfile y a\u00f1adimos al final del archivo la entrada [scripts] y, por ejemplo, la l\u00ednea que vemos en la imagen 5 justo debajo de la entrada anterior. Esto nos va a permitir lanzar al servidor tecleando pipenv run servidor . Imagen 5 A\u00f1adir scripts a Pipfile Una cosa que nos va a facilitar bastante el trabajo es tener activado el autoguardado para que los cambios que realicemos en nuestros ficheros queden archivados localmente sin necesidad de hacer nada mas. En la imagen 6 vemos la ubicaci\u00f3n de esta opci\u00f3n indicando el check que est\u00e1 activada. Imagen 6 Opci\u00f3n de autoguardado en VSCode En la imagen 7 tenemos el resultado de poner en marcha el servidor local desde la l\u00ednea de comandos tecleando $ pipenv run servidor . Debemos esperar unos instantes hasta que se nos muestre la informaci\u00f3n relativa a que la documentaci\u00f3n se ha construido, que el servidor est\u00e1 disponible en http://127.0.0.1:8000 , que comienza la visualizaci\u00f3n de cambios y la detecci\u00f3n de cambios. Imagen 7 Lanzamiento del servidor local En la imagen 8 vemos el resultado de nuestro trabajo en el navegador Mozilla Firefox. Imagen 8 Vista en navegador Mozilla Firefox","title":"Como trabajar"},{"location":"trabajo/#como-trabajar","text":"Para poder ver el avance de nuestro trabajo tal y como se ver\u00e1 en Internet, tenemos que poner en marcha un servidor de pruebas local. Esto es tan sencillo como teclear en la terminal anterior (si la hemos cerrado volvemos a abrirla estando en la carpeta de trabajo) lo siguiente: $ pipenv run mkdocs serve Esto monta un servidor con su propio Python para dejar el del sistema sin manipular. Este servidor se debe mantener abierto desde una terminal de comandos mientras estemos trabajando. Si queremos echarlo abajo basta con pulsar la secuencia Ctrl+C. Es posible que al intentar montar el servidor nos genere alg\u00fan tipo de error, como el que vemos en la imagen 1. Imagen 1 Error por m\u00f3dulo faltante Para subsanar el error basta con instalar las extensiones de Python para Markdown tal y como vemos en la imagen 2. Imagen 2 Instalaci\u00f3n de m\u00f3dulo faltante Otro posible error que se nos puede producir y como solucionarlo lo vemos en la imagen 3. Se trata de un plugin minificador que elimina espacios en blanco, comentarios, combina archivos y optimiza / acorta algunos patrones de programaci\u00f3n comunes. Imagen 3 Instalaci\u00f3n del plugin minify El mismo resultado lo obtenemos si en la terminal tecleamos lo siguiente: $ pip install mkdocs-minify-plugin Si nos genera alg\u00fan tipo de error relacionado con la librer\u00eda Material podemos instalarla de la forma que vemos en la imagen 4. Imagen 4 Instalaci\u00f3n de la libreria Material","title":"Como trabajar"},{"location":"trabajo/#atajos-para-facilitar-el-trabajo","text":"Ya hemos visto que para lanzar el servidor local tenemos que teclear pipenv run mkdocs serve . Podemos poner algo mas sencillo y facil de recordar para nosotros y que el comando pipenv run act\u00fae de la misma forma, para ello vamos a abrir el archivo Pipfile y a\u00f1adimos al final del archivo la entrada [scripts] y, por ejemplo, la l\u00ednea que vemos en la imagen 5 justo debajo de la entrada anterior. Esto nos va a permitir lanzar al servidor tecleando pipenv run servidor . Imagen 5 A\u00f1adir scripts a Pipfile Una cosa que nos va a facilitar bastante el trabajo es tener activado el autoguardado para que los cambios que realicemos en nuestros ficheros queden archivados localmente sin necesidad de hacer nada mas. En la imagen 6 vemos la ubicaci\u00f3n de esta opci\u00f3n indicando el check que est\u00e1 activada. Imagen 6 Opci\u00f3n de autoguardado en VSCode En la imagen 7 tenemos el resultado de poner en marcha el servidor local desde la l\u00ednea de comandos tecleando $ pipenv run servidor . Debemos esperar unos instantes hasta que se nos muestre la informaci\u00f3n relativa a que la documentaci\u00f3n se ha construido, que el servidor est\u00e1 disponible en http://127.0.0.1:8000 , que comienza la visualizaci\u00f3n de cambios y la detecci\u00f3n de cambios. Imagen 7 Lanzamiento del servidor local En la imagen 8 vemos el resultado de nuestro trabajo en el navegador Mozilla Firefox. Imagen 8 Vista en navegador Mozilla Firefox","title":"Atajos para facilitar el trabajo"},{"location":"Referencias/antes/","text":"Antes de nada \u00b6 Lo primero que voy a hacer es agradecer a Cristobal Contreras en dos sentidos muy concretos: Por la creaci\u00f3n de la plantilla que es una de esas cosas que te encuentras y que te cambian la vida frente a un ordenador. Por la ayuda prestada contestando a mis preguntas y dedicando parte de su tiempo a resolver todas mis meteduras de pata a trav\u00e9s de esas videoconferencias por Jitsi tan edificantes. Cristobal es un gran tipo de Almer\u00eda y alrededores, como el mismo dice, del que os recomiendo que no dejeis de seguirlo en: Perfil de Linkedin donde nos expone su ya extensa biograf\u00eda. Github de Cristobal Twitter de Cristobal La Jaquer\u00eda \u2013 El HackSpace de Almer\u00eda HackLab Almer\u00eda The Pymiento Project \u00a1 GRACIAS !","title":"Antes de nada"},{"location":"Referencias/antes/#antes-de-nada","text":"Lo primero que voy a hacer es agradecer a Cristobal Contreras en dos sentidos muy concretos: Por la creaci\u00f3n de la plantilla que es una de esas cosas que te encuentras y que te cambian la vida frente a un ordenador. Por la ayuda prestada contestando a mis preguntas y dedicando parte de su tiempo a resolver todas mis meteduras de pata a trav\u00e9s de esas videoconferencias por Jitsi tan edificantes. Cristobal es un gran tipo de Almer\u00eda y alrededores, como el mismo dice, del que os recomiendo que no dejeis de seguirlo en: Perfil de Linkedin donde nos expone su ya extensa biograf\u00eda. Github de Cristobal Twitter de Cristobal La Jaquer\u00eda \u2013 El HackSpace de Almer\u00eda HackLab Almer\u00eda The Pymiento Project \u00a1 GRACIAS !","title":"Antes de nada"},{"location":"Referencias/licencias/","text":"Licencias \u00b6 Vamos a hablar muy brevemente de algunos tipos de licencias y de como incluirlas en nuestro proyecto. En concreto vamos a ver como podr\u00edamos a\u00f1adir otra licencia online y en segundo lugar vamos a a\u00f1adir a nuestro proyecto una Licencia Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\") . Licencia MIT \u00b6 La licencia MIT fue la establecida al crear el repositorio en GitHub y est\u00e1 disponible para su lectura en el mismo repositorio a trav\u00e9s de este enlace . Licencia GNU \u00b6 Vamos a a\u00f1adir la Licencia de Documentaci\u00f3n Libre GNU General Public License v3.0. Para ello estando en el repositorio online hacemos clic en el bot\u00f3n. En la ventana que se abre debemos teclear, siempre en may\u00fasculas LICENSE o LICENSE.md (imagen 1) y se nos activar\u00e1 la opci\u00f3n de escoger una licencia desde una plantilla. Imagen 1 A\u00f1adir licencia a repositorio La ventana que se nos abre nos muestra las licencias disponibles y por ejemplo (imagen 2) podemos agregar la licencia GNU y que estar\u00e1 disponible en el archivo que se crea. Imagen 2 A\u00f1adir licencia GNU El texto de la licencia queda alojado en la ra\u00edz de la rama master y tendremos que hacer git pull para tenerlo en el repo local y que sea a\u00f1adido al sitio cuando realicemos el despliegue. Enlace a la licencia GNU del proyecto Licencia CC BY-SA 4.0 \u00b6 En este caso simplemente vamos a poner los enlaces a la licencia y el gr\u00e1fico asociado a la misma. La informaci\u00f3n en espa\u00f1ol de la licencia est\u00e1 en CC BY-SA 4.0 La informaci\u00f3n en ing\u00e9s de la licencia est\u00e1 en CC BY-SA 4.0 La informaci\u00f3n sobre como compartir nuestro trabajo est\u00e1 en Creative Commons - Share your work","title":"Licencias"},{"location":"Referencias/licencias/#licencias","text":"Vamos a hablar muy brevemente de algunos tipos de licencias y de como incluirlas en nuestro proyecto. En concreto vamos a ver como podr\u00edamos a\u00f1adir otra licencia online y en segundo lugar vamos a a\u00f1adir a nuestro proyecto una Licencia Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\") .","title":"Licencias"},{"location":"Referencias/licencias/#licencia-mit","text":"La licencia MIT fue la establecida al crear el repositorio en GitHub y est\u00e1 disponible para su lectura en el mismo repositorio a trav\u00e9s de este enlace .","title":"Licencia MIT"},{"location":"Referencias/licencias/#licencia-gnu","text":"Vamos a a\u00f1adir la Licencia de Documentaci\u00f3n Libre GNU General Public License v3.0. Para ello estando en el repositorio online hacemos clic en el bot\u00f3n. En la ventana que se abre debemos teclear, siempre en may\u00fasculas LICENSE o LICENSE.md (imagen 1) y se nos activar\u00e1 la opci\u00f3n de escoger una licencia desde una plantilla. Imagen 1 A\u00f1adir licencia a repositorio La ventana que se nos abre nos muestra las licencias disponibles y por ejemplo (imagen 2) podemos agregar la licencia GNU y que estar\u00e1 disponible en el archivo que se crea. Imagen 2 A\u00f1adir licencia GNU El texto de la licencia queda alojado en la ra\u00edz de la rama master y tendremos que hacer git pull para tenerlo en el repo local y que sea a\u00f1adido al sitio cuando realicemos el despliegue. Enlace a la licencia GNU del proyecto","title":"Licencia GNU"},{"location":"Referencias/licencias/#licencia-cc-by-sa-40","text":"En este caso simplemente vamos a poner los enlaces a la licencia y el gr\u00e1fico asociado a la misma. La informaci\u00f3n en espa\u00f1ol de la licencia est\u00e1 en CC BY-SA 4.0 La informaci\u00f3n en ing\u00e9s de la licencia est\u00e1 en CC BY-SA 4.0 La informaci\u00f3n sobre como compartir nuestro trabajo est\u00e1 en Creative Commons - Share your work","title":"Licencia CC BY-SA 4.0"},{"location":"Referencias/sof/","text":"Software utilizado \u00b6 Sistema operativo: Ubuntu 18.04.4 LTS (Bionic Beaver) Paquete ofim\u00e1tico de referencia: LibreOffice 6.4 Proyecto de documentaci\u00f3n con Markdown que instalamos con $ pip install mkdocs Libreria Material para MkDocs que instalamos con $ pip install mkdocs-material Visual Studio Code Creaci\u00f3n de GIF animados para Ubuntu Peek Sistema principal de capturas de pantalla: Shutter 0.94 Sistema secundario de capturas de pantalla: Flameshot 0.6.0 Dibujo 2D vectorial Inkscape 1.0 Dibujo 3D FreeCAD 0.18 / FreeCAD 0.19 Retoque de im\u00e1genes GIMP 2.10.14","title":"Software utilizado"},{"location":"Referencias/sof/#software-utilizado","text":"Sistema operativo: Ubuntu 18.04.4 LTS (Bionic Beaver) Paquete ofim\u00e1tico de referencia: LibreOffice 6.4 Proyecto de documentaci\u00f3n con Markdown que instalamos con $ pip install mkdocs Libreria Material para MkDocs que instalamos con $ pip install mkdocs-material Visual Studio Code Creaci\u00f3n de GIF animados para Ubuntu Peek Sistema principal de capturas de pantalla: Shutter 0.94 Sistema secundario de capturas de pantalla: Flameshot 0.6.0 Dibujo 2D vectorial Inkscape 1.0 Dibujo 3D FreeCAD 0.18 / FreeCAD 0.19 Retoque de im\u00e1genes GIMP 2.10.14","title":"Software utilizado"},{"location":"Referencias/webgrafia/","text":"Webgraf\u00eda \u00b6 Plantilla de La Jaqueria creada por @CrisConRu P\u00e1ginas de GitHub Proyecto de documentaci\u00f3n con Markdown MkDocs Cuadernos de notas sobre Material para MkDocs: Cuaderno Wikipedia Libro de git Git en VSCode Tutoriales sobre VSCode Uso de herramientas de control de versiones de Git en VSCode Video tutorial de como trabajar con Git desde VSCode Lemoncode blog","title":"Webgrafia"},{"location":"Referencias/webgrafia/#webgrafia","text":"Plantilla de La Jaqueria creada por @CrisConRu P\u00e1ginas de GitHub Proyecto de documentaci\u00f3n con Markdown MkDocs Cuadernos de notas sobre Material para MkDocs: Cuaderno Wikipedia Libro de git Git en VSCode Tutoriales sobre VSCode Uso de herramientas de control de versiones de Git en VSCode Video tutorial de como trabajar con Git desde VSCode Lemoncode blog","title":"Webgraf\u00eda"}]}